{"ast":null,"code":"\n\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate, Link, useParams } from 'react-router-dom';\n// import RatingReviewService from '../service/RatingReviewService';\n// import ProductService from '../service/ProductService';\n// import '../../style/viewproduct.css';\n\n// function ViewProduct() {\n//   const { prodId } = useParams();\n//   const navigate = useNavigate();\n//   const userId = localStorage.getItem('userId');\n\n//   const [prodData, setProdData] = useState({\n//     product_name: '',\n//     product_price: '',\n//     product_description: '',\n//     product_image: null,\n//   });\n\n//   const [reviews, setReviews] = useState([]);\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [editingReviewId, setEditingReviewId] = useState(null);\n\n//   const [formData, setFormData] = useState({\n//     rating_value: 0,\n//     review_description: '',\n//     product_id: prodId,\n//     user_id: userId,\n//   });\n\n//   useEffect(() => {\n//     fetchProductDataById(prodId);\n//     checkIfReviewExists(prodId, userId);\n//   }, [prodId]);\n\n//   const fetchProductDataById = async (prodId) => {\n//     try {\n//       const response = await ProductService.getProductById(prodId);\n//       const { product_name, product_price, product_description, product_image } = response.singleProduct;\n//       setProdData({ product_name, product_price, product_description, product_image });\n//     } catch (error) {\n//       console.error('Error fetching product data:', error);\n//     }\n//   };\n\n//   const checkIfReviewExists = async (prodId, userId) => {\n//     try {\n//       const requestData = { product_id: prodId, user_id: userId };\n//       const reviewResponse = await RatingReviewService.getExistRatingReviewByUserId(requestData);\n\n//       const reviewsList = reviewResponse.ratingReviewDtoList || [];\n\n//       setReviews(reviewsList);\n\n//       const reviewResponseAll = await RatingReviewService.getAllReviewRatings();\n//       console.log(reviewResponseAll);\n\n//     } catch (error) {\n//       console.error('Error checking review:', error);\n//       setReviews([]);\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleStarClick = (index) => {\n//     setFormData({ ...formData, rating_value: index + 1 });\n//   };\n\n//   const handleSubmitReview = async (e) => {\n//     e.preventDefault();\n//     if (!isEditing) {\n//       const existingReview = reviews.find((review) => review.user_id == userId);\n//       if (existingReview) {\n//         alert('You have already submitted a review for this product.');\n//         setFormData({ rating_value: 0, review_description: '' });\n//         return;\n//       }\n//     }\n\n//     try {\n//       if (isEditing) {\n//         await RatingReviewService.updateReviewRatingDetails(editingReviewId, formData); // Update the existing review\n//         alert('Review updated successfully');\n//         setIsEditing(false);\n//         setEditingReviewId(null);\n//       } else {\n//         await RatingReviewService.SaveRatingReview(formData); // Submit a new review\n//         alert('Review submitted successfully');\n//       }\n\n//       // Reset form and refresh reviews\n//       setFormData({ rating_value: 0, review_description: '' });\n//       checkIfReviewExists(prodId, userId);\n//     } catch (error) {\n//       console.error('Error submitting review:', error);\n//       alert('An error occurred while submitting the review');\n//     }\n//   };\n\n//   const handleEditClick = (review) => {\n//     setIsEditing(true);\n//     setEditingReviewId(review.rating_review_id);\n//     setFormData({\n//       rating_value: review.rating_value,\n//       review_description: review.review_description,\n//       product_id: review.product_id,\n//       user_id: review.user_id,\n//     });\n//   };\n\n//   const handleDeleteClick = async (reviewId) => {\n//     const confirmDelete = window.confirm('Are you sure you want to delete this review?');\n//     if (confirmDelete) {\n//       try {\n//         await RatingReviewService.deleteReviewRatingById(reviewId); // Call delete service\n//         alert('Review deleted successfully');\n//         checkIfReviewExists(prodId, userId); // Refresh reviews\n//       } catch (error) {\n//         console.error('Error deleting review:', error);\n//         alert('An error occurred while deleting the review');\n//       }\n//     } else {\n//       return;\n//     }\n\n//   };\n\n//   return (\n//     <div className=\"view-product-container\">\n//       <div className=\"product-content\">\n//         <div className=\"left-container\">\n//           <img\n//             src={`data:image/jpeg;base64,${prodData.product_image}`}\n//             alt={prodData.product_name}\n//             className=\"product-image-view\"\n//           />\n//         </div>\n//         <div className=\"right-container\">\n//           <h2 className=\"product-name\">{prodData.product_name}</h2>\n//           <p className=\"product-price\">${prodData.product_price}</p>\n//           <p className=\"product-description\">{prodData.product_description}</p>\n\n//           <div className=\"add-review\">\n//             <h3>{isEditing ? 'Edit Your Review' : 'Write Your Review'}</h3>\n//             <div className=\"star-rating\">\n//               {[...Array(5)].map((_, index) => (\n//                 <span\n//                   key={index}\n//                   className={index < formData.rating_value ? 'filled' : 'empty'}\n//                   onClick={() => handleStarClick(index)}\n//                 >\n//                   ★\n//                 </span>\n//               ))}\n//             </div>\n//             <textarea\n//               className=\"review-textbox\"\n//               name=\"review_description\"\n//               placeholder=\"Write your review here...\"\n//               value={formData.review_description}\n//               onChange={handleInputChange}\n//               required\n//             ></textarea>\n//             <button onClick={handleSubmitReview} className=\"submit-review-button\">\n//               {isEditing ? 'Update Review' : 'Submit Review'}\n//             </button>\n//             <br />\n//             <Link to=\"/product-list\" className=\"back-link\">\n//               Back to Product List\n//             </Link>\n//           </div>\n//         </div>\n//       </div>\n\n//       {reviews.length > 0 && (\n//         <div className=\"existing-reviews\">\n//           <h3>Customer Reviews</h3>\n//           <div className=\"reviews-container\">\n//             {reviews.map((review) => (\n//               <div key={review.rating_review_id} className=\"review-card\">\n//                 <p style={{ textTransform: \"uppercase\" }}>\n//                   {review.user_name} {review.user_id == userId ? <span style={{ textTransform: \"none\" }}> (you)</span> : \"\"}\n//                 </p>\n\n//                 <div className=\"review-header\">\n//                   <div className=\"review-rating\">\n//                     {[...Array(review.rating_value)].map((_, index) => (\n//                       <span key={index} className=\"filled\">★</span>\n//                     ))}\n//                   </div>\n//                   <div className=\"buttons\">\n//                     <button className=\"edit-button\" onClick={() => handleEditClick(review)}>\n//                       Edit\n//                     </button>\n//                     <button className=\"delete-button\" onClick={() => handleDeleteClick(review.rating_review_id)}>\n//                       Delete\n//                     </button>\n//                   </div>\n//                 </div>\n\n//                 <p className=\"review-description\">{review.review_description}</p>\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       )}\n\n//     </div>\n//   );\n// }\n\n// export default ViewProduct;","map":{"version":3,"names":[],"sources":["D:/E-COMMERCE-NEW WORKING/E-COMMERCE-NEW/E-commerce-frontend-main/src/components/pages/ViewProduct.jsx"],"sourcesContent":["\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useNavigate, Link, useParams } from 'react-router-dom';\r\n// import RatingReviewService from '../service/RatingReviewService';\r\n// import ProductService from '../service/ProductService';\r\n// import '../../style/viewproduct.css';\r\n\r\n// function ViewProduct() {\r\n//   const { prodId } = useParams();\r\n//   const navigate = useNavigate();\r\n//   const userId = localStorage.getItem('userId');\r\n\r\n//   const [prodData, setProdData] = useState({\r\n//     product_name: '',\r\n//     product_price: '',\r\n//     product_description: '',\r\n//     product_image: null,\r\n//   });\r\n\r\n//   const [reviews, setReviews] = useState([]);\r\n//   const [isEditing, setIsEditing] = useState(false);\r\n//   const [editingReviewId, setEditingReviewId] = useState(null);\r\n\r\n//   const [formData, setFormData] = useState({\r\n//     rating_value: 0,\r\n//     review_description: '',\r\n//     product_id: prodId,\r\n//     user_id: userId,\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     fetchProductDataById(prodId);\r\n//     checkIfReviewExists(prodId, userId);\r\n//   }, [prodId]);\r\n\r\n//   const fetchProductDataById = async (prodId) => {\r\n//     try {\r\n//       const response = await ProductService.getProductById(prodId);\r\n//       const { product_name, product_price, product_description, product_image } = response.singleProduct;\r\n//       setProdData({ product_name, product_price, product_description, product_image });\r\n//     } catch (error) {\r\n//       console.error('Error fetching product data:', error);\r\n//     }\r\n//   };\r\n\r\n//   const checkIfReviewExists = async (prodId, userId) => {\r\n//     try {\r\n//       const requestData = { product_id: prodId, user_id: userId };\r\n//       const reviewResponse = await RatingReviewService.getExistRatingReviewByUserId(requestData);\r\n\r\n//       const reviewsList = reviewResponse.ratingReviewDtoList || [];\r\n\r\n//       setReviews(reviewsList);\r\n\r\n\r\n//       const reviewResponseAll = await RatingReviewService.getAllReviewRatings();\r\n//       console.log(reviewResponseAll);\r\n\r\n//     } catch (error) {\r\n//       console.error('Error checking review:', error);\r\n//       setReviews([]);\r\n//     }\r\n//   };\r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData({ ...formData, [name]: value });\r\n//   };\r\n\r\n//   const handleStarClick = (index) => {\r\n//     setFormData({ ...formData, rating_value: index + 1 });\r\n//   };\r\n\r\n//   const handleSubmitReview = async (e) => {\r\n//     e.preventDefault();\r\n//     if (!isEditing) {\r\n//       const existingReview = reviews.find((review) => review.user_id == userId);\r\n//       if (existingReview) {\r\n//         alert('You have already submitted a review for this product.');\r\n//         setFormData({ rating_value: 0, review_description: '' });\r\n//         return;\r\n//       }\r\n//     }\r\n\r\n//     try {\r\n//       if (isEditing) {\r\n//         await RatingReviewService.updateReviewRatingDetails(editingReviewId, formData); // Update the existing review\r\n//         alert('Review updated successfully');\r\n//         setIsEditing(false);\r\n//         setEditingReviewId(null);\r\n//       } else {\r\n//         await RatingReviewService.SaveRatingReview(formData); // Submit a new review\r\n//         alert('Review submitted successfully');\r\n//       }\r\n\r\n//       // Reset form and refresh reviews\r\n//       setFormData({ rating_value: 0, review_description: '' });\r\n//       checkIfReviewExists(prodId, userId);\r\n//     } catch (error) {\r\n//       console.error('Error submitting review:', error);\r\n//       alert('An error occurred while submitting the review');\r\n//     }\r\n//   };\r\n\r\n//   const handleEditClick = (review) => {\r\n//     setIsEditing(true);\r\n//     setEditingReviewId(review.rating_review_id);\r\n//     setFormData({\r\n//       rating_value: review.rating_value,\r\n//       review_description: review.review_description,\r\n//       product_id: review.product_id,\r\n//       user_id: review.user_id,\r\n//     });\r\n//   };\r\n\r\n//   const handleDeleteClick = async (reviewId) => {\r\n//     const confirmDelete = window.confirm('Are you sure you want to delete this review?');\r\n//     if (confirmDelete) {\r\n//       try {\r\n//         await RatingReviewService.deleteReviewRatingById(reviewId); // Call delete service\r\n//         alert('Review deleted successfully');\r\n//         checkIfReviewExists(prodId, userId); // Refresh reviews\r\n//       } catch (error) {\r\n//         console.error('Error deleting review:', error);\r\n//         alert('An error occurred while deleting the review');\r\n//       }\r\n//     } else {\r\n//       return;\r\n//     }\r\n\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"view-product-container\">\r\n//       <div className=\"product-content\">\r\n//         <div className=\"left-container\">\r\n//           <img\r\n//             src={`data:image/jpeg;base64,${prodData.product_image}`}\r\n//             alt={prodData.product_name}\r\n//             className=\"product-image-view\"\r\n//           />\r\n//         </div>\r\n//         <div className=\"right-container\">\r\n//           <h2 className=\"product-name\">{prodData.product_name}</h2>\r\n//           <p className=\"product-price\">${prodData.product_price}</p>\r\n//           <p className=\"product-description\">{prodData.product_description}</p>\r\n\r\n//           <div className=\"add-review\">\r\n//             <h3>{isEditing ? 'Edit Your Review' : 'Write Your Review'}</h3>\r\n//             <div className=\"star-rating\">\r\n//               {[...Array(5)].map((_, index) => (\r\n//                 <span\r\n//                   key={index}\r\n//                   className={index < formData.rating_value ? 'filled' : 'empty'}\r\n//                   onClick={() => handleStarClick(index)}\r\n//                 >\r\n//                   ★\r\n//                 </span>\r\n//               ))}\r\n//             </div>\r\n//             <textarea\r\n//               className=\"review-textbox\"\r\n//               name=\"review_description\"\r\n//               placeholder=\"Write your review here...\"\r\n//               value={formData.review_description}\r\n//               onChange={handleInputChange}\r\n//               required\r\n//             ></textarea>\r\n//             <button onClick={handleSubmitReview} className=\"submit-review-button\">\r\n//               {isEditing ? 'Update Review' : 'Submit Review'}\r\n//             </button>\r\n//             <br />\r\n//             <Link to=\"/product-list\" className=\"back-link\">\r\n//               Back to Product List\r\n//             </Link>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n\r\n//       {reviews.length > 0 && (\r\n//         <div className=\"existing-reviews\">\r\n//           <h3>Customer Reviews</h3>\r\n//           <div className=\"reviews-container\">\r\n//             {reviews.map((review) => (\r\n//               <div key={review.rating_review_id} className=\"review-card\">\r\n//                 <p style={{ textTransform: \"uppercase\" }}>\r\n//                   {review.user_name} {review.user_id == userId ? <span style={{ textTransform: \"none\" }}> (you)</span> : \"\"}\r\n//                 </p>\r\n\r\n\r\n\r\n//                 <div className=\"review-header\">\r\n//                   <div className=\"review-rating\">\r\n//                     {[...Array(review.rating_value)].map((_, index) => (\r\n//                       <span key={index} className=\"filled\">★</span>\r\n//                     ))}\r\n//                   </div>\r\n//                   <div className=\"buttons\">\r\n//                     <button className=\"edit-button\" onClick={() => handleEditClick(review)}>\r\n//                       Edit\r\n//                     </button>\r\n//                     <button className=\"delete-button\" onClick={() => handleDeleteClick(review.rating_review_id)}>\r\n//                       Delete\r\n//                     </button>\r\n//                   </div>\r\n//                 </div>\r\n\r\n\r\n\r\n//                 <p className=\"review-description\">{review.review_description}</p>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n\r\n\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ViewProduct;\r\n\r\n"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}