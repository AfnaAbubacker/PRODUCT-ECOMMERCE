{"ast":null,"code":"var _jsxFileName = \"D:\\\\E-COMMERCE-NEW WORKING\\\\E-COMMERCE-NEW\\\\E-commerce-frontend-main\\\\src\\\\components\\\\pages\\\\ViewProduct.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate, Link, useParams } from 'react-router-dom';\n// import RatingReviewService from '../service/RatingReviewService';\n// import ProductService from '../service/ProductService';\n// import '../../style/viewproduct.css';\n\n// function ViewProduct() {\n//   const { prodId } = useParams();\n//   const navigate = useNavigate();\n//   const userId = localStorage.getItem('userId');\n\n//   const [prodData, setProdData] = useState({\n//     product_name: '',\n//     product_price: '',\n//     product_description: '',\n//     product_image: null,\n//   });\n\n//   const [reviews, setReviews] = useState([]);\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [editingReviewId, setEditingReviewId] = useState(null);\n\n//   const [formData, setFormData] = useState({\n//     rating_value: 0,\n//     review_description: '',\n//     product_id: prodId,\n//     user_id: userId,\n//   });\n\n//   useEffect(() => {\n//     fetchProductDataById(prodId);\n//     checkIfReviewExists(prodId, userId);\n//   }, [prodId]);\n\n//   const fetchProductDataById = async (prodId) => {\n//     try {\n//       const response = await ProductService.getProductById(prodId);\n//       const { product_name, product_price, product_description, product_image } = response.singleProduct;\n//       setProdData({ product_name, product_price, product_description, product_image });\n//     } catch (error) {\n//       console.error('Error fetching product data:', error);\n//     }\n//   };\n\n//   const checkIfReviewExists = async (prodId, userId) => {\n//     try {\n//       const requestData = { product_id: prodId, user_id: userId };\n//       const reviewResponse = await RatingReviewService.getExistRatingReviewByUserId(requestData);\n\n//       const reviewsList = reviewResponse.ratingReviewDtoList || [];\n\n//       setReviews(reviewsList);\n\n//       const reviewResponseAll = await RatingReviewService.getAllReviewRatings();\n//       console.log(reviewResponseAll);\n\n//     } catch (error) {\n//       console.error('Error checking review:', error);\n//       setReviews([]);\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleStarClick = (index) => {\n//     setFormData({ ...formData, rating_value: index + 1 });\n//   };\n\n//   const handleSubmitReview = async (e) => {\n//     e.preventDefault();\n//     if (!isEditing) {\n//       const existingReview = reviews.find((review) => review.user_id == userId);\n//       if (existingReview) {\n//         alert('You have already submitted a review for this product.');\n//         setFormData({ rating_value: 0, review_description: '' });\n//         return;\n//       }\n//     }\n\n//     try {\n//       if (isEditing) {\n//         await RatingReviewService.updateReviewRatingDetails(editingReviewId, formData); // Update the existing review\n//         alert('Review updated successfully');\n//         setIsEditing(false);\n//         setEditingReviewId(null);\n//       } else {\n//         await RatingReviewService.SaveRatingReview(formData); // Submit a new review\n//         alert('Review submitted successfully');\n//       }\n\n//       // Reset form and refresh reviews\n//       setFormData({ rating_value: 0, review_description: '' });\n//       checkIfReviewExists(prodId, userId);\n//     } catch (error) {\n//       console.error('Error submitting review:', error);\n//       alert('An error occurred while submitting the review');\n//     }\n//   };\n\n//   const handleEditClick = (review) => {\n//     setIsEditing(true);\n//     setEditingReviewId(review.rating_review_id);\n//     setFormData({\n//       rating_value: review.rating_value,\n//       review_description: review.review_description,\n//       product_id: review.product_id,\n//       user_id: review.user_id,\n//     });\n//   };\n\n//   const handleDeleteClick = async (reviewId) => {\n//     const confirmDelete = window.confirm('Are you sure you want to delete this review?');\n//     if (confirmDelete) {\n//       try {\n//         await RatingReviewService.deleteReviewRatingById(reviewId); // Call delete service\n//         alert('Review deleted successfully');\n//         checkIfReviewExists(prodId, userId); // Refresh reviews\n//       } catch (error) {\n//         console.error('Error deleting review:', error);\n//         alert('An error occurred while deleting the review');\n//       }\n//     } else {\n//       return;\n//     }\n\n//   };\n\n//   return (\n//     <div className=\"view-product-container\">\n//       <div className=\"product-content\">\n//         <div className=\"left-container\">\n//           <img\n//             src={`data:image/jpeg;base64,${prodData.product_image}`}\n//             alt={prodData.product_name}\n//             className=\"product-image-view\"\n//           />\n//         </div>\n//         <div className=\"right-container\">\n//           <h2 className=\"product-name\">{prodData.product_name}</h2>\n//           <p className=\"product-price\">${prodData.product_price}</p>\n//           <p className=\"product-description\">{prodData.product_description}</p>\n\n//           <div className=\"add-review\">\n//             <h3>{isEditing ? 'Edit Your Review' : 'Write Your Review'}</h3>\n//             <div className=\"star-rating\">\n//               {[...Array(5)].map((_, index) => (\n//                 <span\n//                   key={index}\n//                   className={index < formData.rating_value ? 'filled' : 'empty'}\n//                   onClick={() => handleStarClick(index)}\n//                 >\n//                   ★\n//                 </span>\n//               ))}\n//             </div>\n//             <textarea\n//               className=\"review-textbox\"\n//               name=\"review_description\"\n//               placeholder=\"Write your review here...\"\n//               value={formData.review_description}\n//               onChange={handleInputChange}\n//               required\n//             ></textarea>\n//             <button onClick={handleSubmitReview} className=\"submit-review-button\">\n//               {isEditing ? 'Update Review' : 'Submit Review'}\n//             </button>\n//             <br />\n//             <Link to=\"/product-list\" className=\"back-link\">\n//               Back to Product List\n//             </Link>\n//           </div>\n//         </div>\n//       </div>\n\n//       {reviews.length > 0 && (\n//         <div className=\"existing-reviews\">\n//           <h3>Customer Reviews</h3>\n//           <div className=\"reviews-container\">\n//             {reviews.map((review) => (\n//               <div key={review.rating_review_id} className=\"review-card\">\n//                 <p style={{ textTransform: \"uppercase\" }}>\n//                   {review.user_name} {review.user_id == userId ? <span style={{ textTransform: \"none\" }}> (you)</span> : \"\"}\n//                 </p>\n\n//                 <div className=\"review-header\">\n//                   <div className=\"review-rating\">\n//                     {[...Array(review.rating_value)].map((_, index) => (\n//                       <span key={index} className=\"filled\">★</span>\n//                     ))}\n//                   </div>\n//                   <div className=\"buttons\">\n//                     <button className=\"edit-button\" onClick={() => handleEditClick(review)}>\n//                       Edit\n//                     </button>\n//                     <button className=\"delete-button\" onClick={() => handleDeleteClick(review.rating_review_id)}>\n//                       Delete\n//                     </button>\n//                   </div>\n//                 </div>\n\n//                 <p className=\"review-description\">{review.review_description}</p>\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       )}\n\n//     </div>\n//   );\n// }\n\n// export default ViewProduct;\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, Link, useParams } from 'react-router-dom';\nimport RatingReviewService from '../service/RatingReviewService';\nimport ProductService from '../service/ProductService';\nimport '../../style/viewproduct.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ViewProduct() {\n  _s();\n  const {\n    prodId\n  } = useParams();\n  const navigate = useNavigate();\n  const userId = localStorage.getItem('userId');\n  const [prodData, setProdData] = useState({\n    product_name: '',\n    product_price: '',\n    product_description: '',\n    product_image: null\n  });\n  const [reviews, setReviews] = useState([]);\n  const [allReviews, setAllReviews] = useState([]); // To hold all reviews\n  const [isEditing, setIsEditing] = useState(false);\n  const [editingReviewId, setEditingReviewId] = useState(null);\n  const [formData, setFormData] = useState({\n    rating_value: 0,\n    review_description: '',\n    product_id: prodId,\n    user_id: userId\n  });\n  useEffect(() => {\n    fetchProductDataById(prodId);\n    checkIfReviewExists(prodId, userId);\n    fetchAllReviews(prodId); // Fetch all reviews\n  }, [prodId]);\n  const fetchProductDataById = async prodId => {\n    try {\n      const response = await ProductService.getProductById(prodId);\n      const {\n        product_name,\n        product_price,\n        product_description,\n        product_image\n      } = response.singleProduct;\n      setProdData({\n        product_name,\n        product_price,\n        product_description,\n        product_image\n      });\n    } catch (error) {\n      console.error('Error fetching product data:', error);\n    }\n  };\n  const checkIfReviewExists = async (prodId, userId) => {\n    try {\n      const requestData = {\n        product_id: prodId,\n        user_id: userId\n      };\n      const reviewResponse = await RatingReviewService.getExistRatingReviewByUserId(requestData);\n      const reviewsList = reviewResponse.ratingReviewDtoList || [];\n      setReviews(reviewsList);\n    } catch (error) {\n      console.error('Error checking review:', error);\n      setReviews([]);\n    }\n  };\n  const fetchAllReviews = async () => {\n    try {\n      const reviewResponseAll = await RatingReviewService.getAllReviewRatings();\n      console.log(reviewResponseAll);\n      const allReviewsList = reviewResponseAll.ratingReviewList || [];\n      // Filter out the logged-in user's review\n      const filteredReviews = allReviewsList.filter(review => review.user.id !== userId && review.r);\n      setAllReviews(filteredReviews); // Set all other reviews\n    } catch (error) {\n      console.error('Error fetching all reviews:', error);\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleStarClick = index => {\n    setFormData({\n      ...formData,\n      rating_value: index + 1\n    });\n  };\n  const handleSubmitReview = async e => {\n    e.preventDefault();\n    if (!isEditing) {\n      const existingReview = reviews.find(review => review.user_id == userId);\n      if (existingReview) {\n        alert('You have already submitted a review for this product.');\n        setFormData({\n          rating_value: 0,\n          review_description: ''\n        });\n        return;\n      }\n    }\n    try {\n      if (isEditing) {\n        await RatingReviewService.updateReviewRatingDetails(editingReviewId, formData); // Update the existing review\n        alert('Review updated successfully');\n        setIsEditing(false);\n        setEditingReviewId(null);\n      } else {\n        await RatingReviewService.SaveRatingReview(formData); // Submit a new review\n        alert('Review submitted successfully');\n      }\n\n      // Reset form and refresh reviews\n      setFormData({\n        rating_value: 0,\n        review_description: ''\n      });\n      checkIfReviewExists(prodId, userId);\n    } catch (error) {\n      console.error('Error submitting review:', error);\n      alert('An error occurred while submitting the review');\n    }\n  };\n  const handleEditClick = review => {\n    setIsEditing(true);\n    setEditingReviewId(review.rating_review_id);\n    setFormData({\n      rating_value: review.rating_value,\n      review_description: review.review_description,\n      product_id: review.product_id,\n      user_id: review.user_id\n    });\n  };\n  const handleDeleteClick = async reviewId => {\n    const confirmDelete = window.confirm('Are you sure you want to delete this review?');\n    if (confirmDelete) {\n      try {\n        await RatingReviewService.deleteReviewRatingById(reviewId); // Call delete service\n        alert('Review deleted successfully');\n        checkIfReviewExists(prodId, userId); // Refresh reviews\n      } catch (error) {\n        console.error('Error deleting review:', error);\n        alert('An error occurred while deleting the review');\n      }\n    } else {\n      return;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"view-product-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"product-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `data:image/jpeg;base64,${prodData.product_image}`,\n          alt: prodData.product_name,\n          className: \"product-image-view\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"product-name\",\n          children: prodData.product_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"product-price\",\n          children: [\"$\", prodData.product_price]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"product-description\",\n          children: prodData.product_description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add-review\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: isEditing ? 'Edit Your Review' : 'Write Your Review'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"star-rating\",\n            children: [...Array(5)].map((_, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: index < formData.rating_value ? 'filled' : 'empty',\n              onClick: () => handleStarClick(index),\n              children: \"\\u2605\"\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"review-textbox\",\n            name: \"review_description\",\n            placeholder: \"Write your review here...\",\n            value: formData.review_description,\n            onChange: handleInputChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSubmitReview,\n            className: \"submit-review-button\",\n            children: isEditing ? 'Update Review' : 'Submit Review'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/product-list\",\n            className: \"back-link\",\n            children: \"Back to Product List\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this), reviews.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"existing-reviews\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Customer Reviews\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reviews-container\",\n        children: reviews.map(review => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"review-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              textTransform: 'uppercase'\n            },\n            children: [review.user_name, \" \", review.user_id == userId ? /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                textTransform: 'none'\n              },\n              children: \" (you)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 66\n            }, this) : '']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"review-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"review-rating\",\n              children: [...Array(review.rating_value)].map((_, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"filled\",\n                children: \"\\u2605\"\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 430,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"buttons\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"edit-button\",\n                onClick: () => handleEditClick(review),\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"delete-button\",\n                onClick: () => handleDeleteClick(review.rating_review_id),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"review-description\",\n            children: review.review_description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 17\n          }, this)]\n        }, review.rating_review_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 9\n    }, this), allReviews.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"other-reviews\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reviews-container\",\n        children: allReviews.map(review => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"review-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              textTransform: 'uppercase'\n            },\n            children: review.user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"review-header\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"review-rating\",\n              children: [...Array(review.rating_value)].map((_, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"filled\",\n                children: \"\\u2605\"\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 462,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"review-description\",\n            children: review.review_description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 17\n          }, this)]\n        }, review.rating_review_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 371,\n    columnNumber: 5\n  }, this);\n}\n_s(ViewProduct, \"9+/8tLvqz1pL+QHKSM84WQ5CeaU=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ViewProduct;\nexport default ViewProduct;\nvar _c;\n$RefreshReg$(_c, \"ViewProduct\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Link","useParams","RatingReviewService","ProductService","jsxDEV","_jsxDEV","ViewProduct","_s","prodId","navigate","userId","localStorage","getItem","prodData","setProdData","product_name","product_price","product_description","product_image","reviews","setReviews","allReviews","setAllReviews","isEditing","setIsEditing","editingReviewId","setEditingReviewId","formData","setFormData","rating_value","review_description","product_id","user_id","fetchProductDataById","checkIfReviewExists","fetchAllReviews","response","getProductById","singleProduct","error","console","requestData","reviewResponse","getExistRatingReviewByUserId","reviewsList","ratingReviewDtoList","reviewResponseAll","getAllReviewRatings","log","allReviewsList","ratingReviewList","filteredReviews","filter","review","user","id","r","handleInputChange","e","name","value","target","handleStarClick","index","handleSubmitReview","preventDefault","existingReview","find","alert","updateReviewRatingDetails","SaveRatingReview","handleEditClick","rating_review_id","handleDeleteClick","reviewId","confirmDelete","window","confirm","deleteReviewRatingById","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","Array","map","_","onClick","placeholder","onChange","required","to","length","style","textTransform","user_name","_c","$RefreshReg$"],"sources":["D:/E-COMMERCE-NEW WORKING/E-COMMERCE-NEW/E-commerce-frontend-main/src/components/pages/ViewProduct.jsx"],"sourcesContent":["\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useNavigate, Link, useParams } from 'react-router-dom';\r\n// import RatingReviewService from '../service/RatingReviewService';\r\n// import ProductService from '../service/ProductService';\r\n// import '../../style/viewproduct.css';\r\n\r\n// function ViewProduct() {\r\n//   const { prodId } = useParams();\r\n//   const navigate = useNavigate();\r\n//   const userId = localStorage.getItem('userId');\r\n\r\n//   const [prodData, setProdData] = useState({\r\n//     product_name: '',\r\n//     product_price: '',\r\n//     product_description: '',\r\n//     product_image: null,\r\n//   });\r\n\r\n//   const [reviews, setReviews] = useState([]);\r\n//   const [isEditing, setIsEditing] = useState(false);\r\n//   const [editingReviewId, setEditingReviewId] = useState(null);\r\n\r\n//   const [formData, setFormData] = useState({\r\n//     rating_value: 0,\r\n//     review_description: '',\r\n//     product_id: prodId,\r\n//     user_id: userId,\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     fetchProductDataById(prodId);\r\n//     checkIfReviewExists(prodId, userId);\r\n//   }, [prodId]);\r\n\r\n//   const fetchProductDataById = async (prodId) => {\r\n//     try {\r\n//       const response = await ProductService.getProductById(prodId);\r\n//       const { product_name, product_price, product_description, product_image } = response.singleProduct;\r\n//       setProdData({ product_name, product_price, product_description, product_image });\r\n//     } catch (error) {\r\n//       console.error('Error fetching product data:', error);\r\n//     }\r\n//   };\r\n\r\n//   const checkIfReviewExists = async (prodId, userId) => {\r\n//     try {\r\n//       const requestData = { product_id: prodId, user_id: userId };\r\n//       const reviewResponse = await RatingReviewService.getExistRatingReviewByUserId(requestData);\r\n\r\n//       const reviewsList = reviewResponse.ratingReviewDtoList || [];\r\n\r\n//       setReviews(reviewsList);\r\n\r\n\r\n//       const reviewResponseAll = await RatingReviewService.getAllReviewRatings();\r\n//       console.log(reviewResponseAll);\r\n\r\n//     } catch (error) {\r\n//       console.error('Error checking review:', error);\r\n//       setReviews([]);\r\n//     }\r\n//   };\r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData({ ...formData, [name]: value });\r\n//   };\r\n\r\n//   const handleStarClick = (index) => {\r\n//     setFormData({ ...formData, rating_value: index + 1 });\r\n//   };\r\n\r\n//   const handleSubmitReview = async (e) => {\r\n//     e.preventDefault();\r\n//     if (!isEditing) {\r\n//       const existingReview = reviews.find((review) => review.user_id == userId);\r\n//       if (existingReview) {\r\n//         alert('You have already submitted a review for this product.');\r\n//         setFormData({ rating_value: 0, review_description: '' });\r\n//         return;\r\n//       }\r\n//     }\r\n\r\n//     try {\r\n//       if (isEditing) {\r\n//         await RatingReviewService.updateReviewRatingDetails(editingReviewId, formData); // Update the existing review\r\n//         alert('Review updated successfully');\r\n//         setIsEditing(false);\r\n//         setEditingReviewId(null);\r\n//       } else {\r\n//         await RatingReviewService.SaveRatingReview(formData); // Submit a new review\r\n//         alert('Review submitted successfully');\r\n//       }\r\n\r\n//       // Reset form and refresh reviews\r\n//       setFormData({ rating_value: 0, review_description: '' });\r\n//       checkIfReviewExists(prodId, userId);\r\n//     } catch (error) {\r\n//       console.error('Error submitting review:', error);\r\n//       alert('An error occurred while submitting the review');\r\n//     }\r\n//   };\r\n\r\n//   const handleEditClick = (review) => {\r\n//     setIsEditing(true);\r\n//     setEditingReviewId(review.rating_review_id);\r\n//     setFormData({\r\n//       rating_value: review.rating_value,\r\n//       review_description: review.review_description,\r\n//       product_id: review.product_id,\r\n//       user_id: review.user_id,\r\n//     });\r\n//   };\r\n\r\n//   const handleDeleteClick = async (reviewId) => {\r\n//     const confirmDelete = window.confirm('Are you sure you want to delete this review?');\r\n//     if (confirmDelete) {\r\n//       try {\r\n//         await RatingReviewService.deleteReviewRatingById(reviewId); // Call delete service\r\n//         alert('Review deleted successfully');\r\n//         checkIfReviewExists(prodId, userId); // Refresh reviews\r\n//       } catch (error) {\r\n//         console.error('Error deleting review:', error);\r\n//         alert('An error occurred while deleting the review');\r\n//       }\r\n//     } else {\r\n//       return;\r\n//     }\r\n\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"view-product-container\">\r\n//       <div className=\"product-content\">\r\n//         <div className=\"left-container\">\r\n//           <img\r\n//             src={`data:image/jpeg;base64,${prodData.product_image}`}\r\n//             alt={prodData.product_name}\r\n//             className=\"product-image-view\"\r\n//           />\r\n//         </div>\r\n//         <div className=\"right-container\">\r\n//           <h2 className=\"product-name\">{prodData.product_name}</h2>\r\n//           <p className=\"product-price\">${prodData.product_price}</p>\r\n//           <p className=\"product-description\">{prodData.product_description}</p>\r\n\r\n//           <div className=\"add-review\">\r\n//             <h3>{isEditing ? 'Edit Your Review' : 'Write Your Review'}</h3>\r\n//             <div className=\"star-rating\">\r\n//               {[...Array(5)].map((_, index) => (\r\n//                 <span\r\n//                   key={index}\r\n//                   className={index < formData.rating_value ? 'filled' : 'empty'}\r\n//                   onClick={() => handleStarClick(index)}\r\n//                 >\r\n//                   ★\r\n//                 </span>\r\n//               ))}\r\n//             </div>\r\n//             <textarea\r\n//               className=\"review-textbox\"\r\n//               name=\"review_description\"\r\n//               placeholder=\"Write your review here...\"\r\n//               value={formData.review_description}\r\n//               onChange={handleInputChange}\r\n//               required\r\n//             ></textarea>\r\n//             <button onClick={handleSubmitReview} className=\"submit-review-button\">\r\n//               {isEditing ? 'Update Review' : 'Submit Review'}\r\n//             </button>\r\n//             <br />\r\n//             <Link to=\"/product-list\" className=\"back-link\">\r\n//               Back to Product List\r\n//             </Link>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n\r\n//       {reviews.length > 0 && (\r\n//         <div className=\"existing-reviews\">\r\n//           <h3>Customer Reviews</h3>\r\n//           <div className=\"reviews-container\">\r\n//             {reviews.map((review) => (\r\n//               <div key={review.rating_review_id} className=\"review-card\">\r\n//                 <p style={{ textTransform: \"uppercase\" }}>\r\n//                   {review.user_name} {review.user_id == userId ? <span style={{ textTransform: \"none\" }}> (you)</span> : \"\"}\r\n//                 </p>\r\n\r\n\r\n\r\n//                 <div className=\"review-header\">\r\n//                   <div className=\"review-rating\">\r\n//                     {[...Array(review.rating_value)].map((_, index) => (\r\n//                       <span key={index} className=\"filled\">★</span>\r\n//                     ))}\r\n//                   </div>\r\n//                   <div className=\"buttons\">\r\n//                     <button className=\"edit-button\" onClick={() => handleEditClick(review)}>\r\n//                       Edit\r\n//                     </button>\r\n//                     <button className=\"delete-button\" onClick={() => handleDeleteClick(review.rating_review_id)}>\r\n//                       Delete\r\n//                     </button>\r\n//                   </div>\r\n//                 </div>\r\n\r\n\r\n\r\n//                 <p className=\"review-description\">{review.review_description}</p>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n\r\n\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ViewProduct;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate, Link, useParams } from 'react-router-dom';\r\nimport RatingReviewService from '../service/RatingReviewService';\r\nimport ProductService from '../service/ProductService';\r\nimport '../../style/viewproduct.css';\r\n\r\nfunction ViewProduct() {\r\n  const { prodId } = useParams();\r\n  const navigate = useNavigate();\r\n  const userId = localStorage.getItem('userId');\r\n\r\n  const [prodData, setProdData] = useState({\r\n    product_name: '',\r\n    product_price: '',\r\n    product_description: '',\r\n    product_image: null,\r\n  });\r\n\r\n  const [reviews, setReviews] = useState([]);\r\n  const [allReviews, setAllReviews] = useState([]); // To hold all reviews\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editingReviewId, setEditingReviewId] = useState(null);\r\n\r\n  const [formData, setFormData] = useState({\r\n    rating_value: 0,\r\n    review_description: '',\r\n    product_id: prodId,\r\n    user_id: userId,\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchProductDataById(prodId);\r\n    checkIfReviewExists(prodId, userId);\r\n    fetchAllReviews(prodId);  // Fetch all reviews\r\n  }, [prodId]);\r\n\r\n  const fetchProductDataById = async (prodId) => {\r\n    try {\r\n      const response = await ProductService.getProductById(prodId);\r\n      const { product_name, product_price, product_description, product_image } = response.singleProduct;\r\n      setProdData({ product_name, product_price, product_description, product_image });\r\n    } catch (error) {\r\n      console.error('Error fetching product data:', error);\r\n    }\r\n  };\r\n\r\n  const checkIfReviewExists = async (prodId, userId) => {\r\n    try {\r\n      const requestData = { product_id: prodId, user_id: userId };\r\n      const reviewResponse = await RatingReviewService.getExistRatingReviewByUserId(requestData);\r\n\r\n      const reviewsList = reviewResponse.ratingReviewDtoList || [];\r\n\r\n      setReviews(reviewsList);\r\n    } catch (error) {\r\n      console.error('Error checking review:', error);\r\n      setReviews([]);\r\n    }\r\n  };\r\n\r\n  const fetchAllReviews = async () => {\r\n    try {\r\n      const reviewResponseAll = await RatingReviewService.getAllReviewRatings();\r\n      console.log(reviewResponseAll);\r\n\r\n      const allReviewsList = reviewResponseAll.ratingReviewList || [];\r\n      // Filter out the logged-in user's review\r\n      const filteredReviews = allReviewsList.filter((review) => review.user.id !== userId && review.r);\r\n\r\n      setAllReviews(filteredReviews); // Set all other reviews\r\n    } catch (error) {\r\n      console.error('Error fetching all reviews:', error);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleStarClick = (index) => {\r\n    setFormData({ ...formData, rating_value: index + 1 });\r\n  };\r\n\r\n  const handleSubmitReview = async (e) => {\r\n    e.preventDefault();\r\n    if (!isEditing) {\r\n      const existingReview = reviews.find((review) => review.user_id == userId);\r\n      if (existingReview) {\r\n        alert('You have already submitted a review for this product.');\r\n        setFormData({ rating_value: 0, review_description: '' });\r\n        return;\r\n      }\r\n    }\r\n\r\n    try {\r\n      if (isEditing) {\r\n        await RatingReviewService.updateReviewRatingDetails(editingReviewId, formData); // Update the existing review\r\n        alert('Review updated successfully');\r\n        setIsEditing(false);\r\n        setEditingReviewId(null);\r\n      } else {\r\n        await RatingReviewService.SaveRatingReview(formData); // Submit a new review\r\n        alert('Review submitted successfully');\r\n      }\r\n\r\n      // Reset form and refresh reviews\r\n      setFormData({ rating_value: 0, review_description: '' });\r\n      checkIfReviewExists(prodId, userId);\r\n    } catch (error) {\r\n      console.error('Error submitting review:', error);\r\n      alert('An error occurred while submitting the review');\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (review) => {\r\n    setIsEditing(true);\r\n    setEditingReviewId(review.rating_review_id);\r\n    setFormData({\r\n      rating_value: review.rating_value,\r\n      review_description: review.review_description,\r\n      product_id: review.product_id,\r\n      user_id: review.user_id,\r\n    });\r\n  };\r\n\r\n  const handleDeleteClick = async (reviewId) => {\r\n    const confirmDelete = window.confirm('Are you sure you want to delete this review?');\r\n    if (confirmDelete) {\r\n      try {\r\n        await RatingReviewService.deleteReviewRatingById(reviewId); // Call delete service\r\n        alert('Review deleted successfully');\r\n        checkIfReviewExists(prodId, userId); // Refresh reviews\r\n      } catch (error) {\r\n        console.error('Error deleting review:', error);\r\n        alert('An error occurred while deleting the review');\r\n      }\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"view-product-container\">\r\n      <div className=\"product-content\">\r\n        <div className=\"left-container\">\r\n          <img\r\n            src={`data:image/jpeg;base64,${prodData.product_image}`}\r\n            alt={prodData.product_name}\r\n            className=\"product-image-view\"\r\n          />\r\n        </div>\r\n        <div className=\"right-container\">\r\n          <h2 className=\"product-name\">{prodData.product_name}</h2>\r\n          <p className=\"product-price\">${prodData.product_price}</p>\r\n          <p className=\"product-description\">{prodData.product_description}</p>\r\n\r\n          <div className=\"add-review\">\r\n            <h3>{isEditing ? 'Edit Your Review' : 'Write Your Review'}</h3>\r\n            <div className=\"star-rating\">\r\n              {[...Array(5)].map((_, index) => (\r\n                <span\r\n                  key={index}\r\n                  className={index < formData.rating_value ? 'filled' : 'empty'}\r\n                  onClick={() => handleStarClick(index)}\r\n                >\r\n                  ★\r\n                </span>\r\n              ))}\r\n            </div>\r\n            <textarea\r\n              className=\"review-textbox\"\r\n              name=\"review_description\"\r\n              placeholder=\"Write your review here...\"\r\n              value={formData.review_description}\r\n              onChange={handleInputChange}\r\n              required\r\n            ></textarea>\r\n            <button onClick={handleSubmitReview} className=\"submit-review-button\">\r\n              {isEditing ? 'Update Review' : 'Submit Review'}\r\n            </button>\r\n            <br />\r\n            <Link to=\"/product-list\" className=\"back-link\">\r\n              Back to Product List\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {reviews.length > 0 && (\r\n        <div className=\"existing-reviews\">\r\n          <h3>Customer Reviews</h3>\r\n          <div className=\"reviews-container\">\r\n            {reviews.map((review) => (\r\n              <div key={review.rating_review_id} className=\"review-card\">\r\n                <p style={{ textTransform: 'uppercase' }}>\r\n                  {review.user_name} {review.user_id == userId ? <span style={{ textTransform: 'none' }}> (you)</span> : ''}\r\n                </p>\r\n\r\n                <div className=\"review-header\">\r\n                  <div className=\"review-rating\">\r\n                    {[...Array(review.rating_value)].map((_, index) => (\r\n                      <span key={index} className=\"filled\">★</span>\r\n                    ))}\r\n                  </div>\r\n                  <div className=\"buttons\">\r\n                    <button className=\"edit-button\" onClick={() => handleEditClick(review)}>\r\n                      Edit\r\n                    </button>\r\n                    <button className=\"delete-button\" onClick={() => handleDeleteClick(review.rating_review_id)}>\r\n                      Delete\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n\r\n                <p className=\"review-description\">{review.review_description}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {allReviews.length > 0 && (\r\n        <div className=\"other-reviews\">\r\n          <div className=\"reviews-container\">\r\n            {allReviews.map((review) => (\r\n              <div key={review.rating_review_id} className=\"review-card\">\r\n                <p style={{ textTransform: 'uppercase' }}>\r\n                  {review.user.name}\r\n                </p>\r\n\r\n                <div className=\"review-header\">\r\n                  <div className=\"review-rating\">\r\n                    {[...Array(review.rating_value)].map((_, index) => (\r\n                      <span key={index} className=\"filled\">★</span>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n\r\n                <p className=\"review-description\">{review.review_description}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewProduct;\r\n\r\n"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,IAAI,EAAEC,SAAS,QAAQ,kBAAkB;AAC/D,OAAOC,mBAAmB,MAAM,gCAAgC;AAChE,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAO,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAO,CAAC,GAAGP,SAAS,CAAC,CAAC;EAC9B,MAAMQ,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAMW,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAE7C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC;IACvCkB,YAAY,EAAE,EAAE;IAChBC,aAAa,EAAE,EAAE;IACjBC,mBAAmB,EAAE,EAAE;IACvBC,aAAa,EAAE;EACjB,CAAC,CAAC;EAEF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACwB,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAClD,MAAM,CAAC0B,SAAS,EAAEC,YAAY,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAAC4B,eAAe,EAAEC,kBAAkB,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EAE5D,MAAM,CAAC8B,QAAQ,EAAEC,WAAW,CAAC,GAAG/B,QAAQ,CAAC;IACvCgC,YAAY,EAAE,CAAC;IACfC,kBAAkB,EAAE,EAAE;IACtBC,UAAU,EAAEvB,MAAM;IAClBwB,OAAO,EAAEtB;EACX,CAAC,CAAC;EAEFZ,SAAS,CAAC,MAAM;IACdmC,oBAAoB,CAACzB,MAAM,CAAC;IAC5B0B,mBAAmB,CAAC1B,MAAM,EAAEE,MAAM,CAAC;IACnCyB,eAAe,CAAC3B,MAAM,CAAC,CAAC,CAAE;EAC5B,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EAEZ,MAAMyB,oBAAoB,GAAG,MAAOzB,MAAM,IAAK;IAC7C,IAAI;MACF,MAAM4B,QAAQ,GAAG,MAAMjC,cAAc,CAACkC,cAAc,CAAC7B,MAAM,CAAC;MAC5D,MAAM;QAAEO,YAAY;QAAEC,aAAa;QAAEC,mBAAmB;QAAEC;MAAc,CAAC,GAAGkB,QAAQ,CAACE,aAAa;MAClGxB,WAAW,CAAC;QAAEC,YAAY;QAAEC,aAAa;QAAEC,mBAAmB;QAAEC;MAAc,CAAC,CAAC;IAClF,CAAC,CAAC,OAAOqB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EAED,MAAML,mBAAmB,GAAG,MAAAA,CAAO1B,MAAM,EAAEE,MAAM,KAAK;IACpD,IAAI;MACF,MAAM+B,WAAW,GAAG;QAAEV,UAAU,EAAEvB,MAAM;QAAEwB,OAAO,EAAEtB;MAAO,CAAC;MAC3D,MAAMgC,cAAc,GAAG,MAAMxC,mBAAmB,CAACyC,4BAA4B,CAACF,WAAW,CAAC;MAE1F,MAAMG,WAAW,GAAGF,cAAc,CAACG,mBAAmB,IAAI,EAAE;MAE5DzB,UAAU,CAACwB,WAAW,CAAC;IACzB,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CnB,UAAU,CAAC,EAAE,CAAC;IAChB;EACF,CAAC;EAED,MAAMe,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF,MAAMW,iBAAiB,GAAG,MAAM5C,mBAAmB,CAAC6C,mBAAmB,CAAC,CAAC;MACzEP,OAAO,CAACQ,GAAG,CAACF,iBAAiB,CAAC;MAE9B,MAAMG,cAAc,GAAGH,iBAAiB,CAACI,gBAAgB,IAAI,EAAE;MAC/D;MACA,MAAMC,eAAe,GAAGF,cAAc,CAACG,MAAM,CAAEC,MAAM,IAAKA,MAAM,CAACC,IAAI,CAACC,EAAE,KAAK7C,MAAM,IAAI2C,MAAM,CAACG,CAAC,CAAC;MAEhGlC,aAAa,CAAC6B,eAAe,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;EAED,MAAMkB,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCjC,WAAW,CAAC;MAAE,GAAGD,QAAQ;MAAE,CAACgC,IAAI,GAAGC;IAAM,CAAC,CAAC;EAC7C,CAAC;EAED,MAAME,eAAe,GAAIC,KAAK,IAAK;IACjCnC,WAAW,CAAC;MAAE,GAAGD,QAAQ;MAAEE,YAAY,EAAEkC,KAAK,GAAG;IAAE,CAAC,CAAC;EACvD,CAAC;EAED,MAAMC,kBAAkB,GAAG,MAAON,CAAC,IAAK;IACtCA,CAAC,CAACO,cAAc,CAAC,CAAC;IAClB,IAAI,CAAC1C,SAAS,EAAE;MACd,MAAM2C,cAAc,GAAG/C,OAAO,CAACgD,IAAI,CAAEd,MAAM,IAAKA,MAAM,CAACrB,OAAO,IAAItB,MAAM,CAAC;MACzE,IAAIwD,cAAc,EAAE;QAClBE,KAAK,CAAC,uDAAuD,CAAC;QAC9DxC,WAAW,CAAC;UAAEC,YAAY,EAAE,CAAC;UAAEC,kBAAkB,EAAE;QAAG,CAAC,CAAC;QACxD;MACF;IACF;IAEA,IAAI;MACF,IAAIP,SAAS,EAAE;QACb,MAAMrB,mBAAmB,CAACmE,yBAAyB,CAAC5C,eAAe,EAAEE,QAAQ,CAAC,CAAC,CAAC;QAChFyC,KAAK,CAAC,6BAA6B,CAAC;QACpC5C,YAAY,CAAC,KAAK,CAAC;QACnBE,kBAAkB,CAAC,IAAI,CAAC;MAC1B,CAAC,MAAM;QACL,MAAMxB,mBAAmB,CAACoE,gBAAgB,CAAC3C,QAAQ,CAAC,CAAC,CAAC;QACtDyC,KAAK,CAAC,+BAA+B,CAAC;MACxC;;MAEA;MACAxC,WAAW,CAAC;QAAEC,YAAY,EAAE,CAAC;QAAEC,kBAAkB,EAAE;MAAG,CAAC,CAAC;MACxDI,mBAAmB,CAAC1B,MAAM,EAAEE,MAAM,CAAC;IACrC,CAAC,CAAC,OAAO6B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD6B,KAAK,CAAC,+CAA+C,CAAC;IACxD;EACF,CAAC;EAED,MAAMG,eAAe,GAAIlB,MAAM,IAAK;IAClC7B,YAAY,CAAC,IAAI,CAAC;IAClBE,kBAAkB,CAAC2B,MAAM,CAACmB,gBAAgB,CAAC;IAC3C5C,WAAW,CAAC;MACVC,YAAY,EAAEwB,MAAM,CAACxB,YAAY;MACjCC,kBAAkB,EAAEuB,MAAM,CAACvB,kBAAkB;MAC7CC,UAAU,EAAEsB,MAAM,CAACtB,UAAU;MAC7BC,OAAO,EAAEqB,MAAM,CAACrB;IAClB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMyC,iBAAiB,GAAG,MAAOC,QAAQ,IAAK;IAC5C,MAAMC,aAAa,GAAGC,MAAM,CAACC,OAAO,CAAC,8CAA8C,CAAC;IACpF,IAAIF,aAAa,EAAE;MACjB,IAAI;QACF,MAAMzE,mBAAmB,CAAC4E,sBAAsB,CAACJ,QAAQ,CAAC,CAAC,CAAC;QAC5DN,KAAK,CAAC,6BAA6B,CAAC;QACpClC,mBAAmB,CAAC1B,MAAM,EAAEE,MAAM,CAAC,CAAC,CAAC;MACvC,CAAC,CAAC,OAAO6B,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C6B,KAAK,CAAC,6CAA6C,CAAC;MACtD;IACF,CAAC,MAAM;MACL;IACF;EACF,CAAC;EAED,oBACE/D,OAAA;IAAK0E,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACrC3E,OAAA;MAAK0E,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9B3E,OAAA;QAAK0E,SAAS,EAAC,gBAAgB;QAAAC,QAAA,eAC7B3E,OAAA;UACE4E,GAAG,EAAE,0BAA0BpE,QAAQ,CAACK,aAAa,EAAG;UACxDgE,GAAG,EAAErE,QAAQ,CAACE,YAAa;UAC3BgE,SAAS,EAAC;QAAoB;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNjF,OAAA;QAAK0E,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9B3E,OAAA;UAAI0E,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAEnE,QAAQ,CAACE;QAAY;UAAAoE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACzDjF,OAAA;UAAG0E,SAAS,EAAC,eAAe;UAAAC,QAAA,GAAC,GAAC,EAACnE,QAAQ,CAACG,aAAa;QAAA;UAAAmE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1DjF,OAAA;UAAG0E,SAAS,EAAC,qBAAqB;UAAAC,QAAA,EAAEnE,QAAQ,CAACI;QAAmB;UAAAkE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAErEjF,OAAA;UAAK0E,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzB3E,OAAA;YAAA2E,QAAA,EAAKzD,SAAS,GAAG,kBAAkB,GAAG;UAAmB;YAAA4D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC/DjF,OAAA;YAAK0E,SAAS,EAAC,aAAa;YAAAC,QAAA,EACzB,CAAC,GAAGO,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAE1B,KAAK,kBAC1B1D,OAAA;cAEE0E,SAAS,EAAEhB,KAAK,GAAGpC,QAAQ,CAACE,YAAY,GAAG,QAAQ,GAAG,OAAQ;cAC9D6D,OAAO,EAAEA,CAAA,KAAM5B,eAAe,CAACC,KAAK,CAAE;cAAAiB,QAAA,EACvC;YAED,GALOjB,KAAK;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAKN,CACP;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,eACNjF,OAAA;YACE0E,SAAS,EAAC,gBAAgB;YAC1BpB,IAAI,EAAC,oBAAoB;YACzBgC,WAAW,EAAC,2BAA2B;YACvC/B,KAAK,EAAEjC,QAAQ,CAACG,kBAAmB;YACnC8D,QAAQ,EAAEnC,iBAAkB;YAC5BoC,QAAQ;UAAA;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,eACZjF,OAAA;YAAQqF,OAAO,EAAE1B,kBAAmB;YAACe,SAAS,EAAC,sBAAsB;YAAAC,QAAA,EAClEzD,SAAS,GAAG,eAAe,GAAG;UAAe;YAAA4D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxC,CAAC,eACTjF,OAAA;YAAA8E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACNjF,OAAA,CAACL,IAAI;YAAC8F,EAAE,EAAC,eAAe;YAACf,SAAS,EAAC,WAAW;YAAAC,QAAA,EAAC;UAE/C;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAELnE,OAAO,CAAC4E,MAAM,GAAG,CAAC,iBACjB1F,OAAA;MAAK0E,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/B3E,OAAA;QAAA2E,QAAA,EAAI;MAAgB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBjF,OAAA;QAAK0E,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAC/B7D,OAAO,CAACqE,GAAG,CAAEnC,MAAM,iBAClBhD,OAAA;UAAmC0E,SAAS,EAAC,aAAa;UAAAC,QAAA,gBACxD3E,OAAA;YAAG2F,KAAK,EAAE;cAAEC,aAAa,EAAE;YAAY,CAAE;YAAAjB,QAAA,GACtC3B,MAAM,CAAC6C,SAAS,EAAC,GAAC,EAAC7C,MAAM,CAACrB,OAAO,IAAItB,MAAM,gBAAGL,OAAA;cAAM2F,KAAK,EAAE;gBAAEC,aAAa,EAAE;cAAO,CAAE;cAAAjB,QAAA,EAAC;YAAM;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,GAAG,EAAE;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxG,CAAC,eAEJjF,OAAA;YAAK0E,SAAS,EAAC,eAAe;YAAAC,QAAA,gBAC5B3E,OAAA;cAAK0E,SAAS,EAAC,eAAe;cAAAC,QAAA,EAC3B,CAAC,GAAGO,KAAK,CAAClC,MAAM,CAACxB,YAAY,CAAC,CAAC,CAAC2D,GAAG,CAAC,CAACC,CAAC,EAAE1B,KAAK,kBAC5C1D,OAAA;gBAAkB0E,SAAS,EAAC,QAAQ;gBAAAC,QAAA,EAAC;cAAC,GAA3BjB,KAAK;gBAAAoB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAA4B,CAC7C;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC,eACNjF,OAAA;cAAK0E,SAAS,EAAC,SAAS;cAAAC,QAAA,gBACtB3E,OAAA;gBAAQ0E,SAAS,EAAC,aAAa;gBAACW,OAAO,EAAEA,CAAA,KAAMnB,eAAe,CAAClB,MAAM,CAAE;gBAAA2B,QAAA,EAAC;cAExE;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACTjF,OAAA;gBAAQ0E,SAAS,EAAC,eAAe;gBAACW,OAAO,EAAEA,CAAA,KAAMjB,iBAAiB,CAACpB,MAAM,CAACmB,gBAAgB,CAAE;gBAAAQ,QAAA,EAAC;cAE7F;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eAENjF,OAAA;YAAG0E,SAAS,EAAC,oBAAoB;YAAAC,QAAA,EAAE3B,MAAM,CAACvB;UAAkB;YAAAqD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA,GArBzDjC,MAAM,CAACmB,gBAAgB;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAsB5B,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,EAEAjE,UAAU,CAAC0E,MAAM,GAAG,CAAC,iBACpB1F,OAAA;MAAK0E,SAAS,EAAC,eAAe;MAAAC,QAAA,eAC5B3E,OAAA;QAAK0E,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAC/B3D,UAAU,CAACmE,GAAG,CAAEnC,MAAM,iBACrBhD,OAAA;UAAmC0E,SAAS,EAAC,aAAa;UAAAC,QAAA,gBACxD3E,OAAA;YAAG2F,KAAK,EAAE;cAAEC,aAAa,EAAE;YAAY,CAAE;YAAAjB,QAAA,EACtC3B,MAAM,CAACC,IAAI,CAACK;UAAI;YAAAwB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChB,CAAC,eAEJjF,OAAA;YAAK0E,SAAS,EAAC,eAAe;YAAAC,QAAA,eAC5B3E,OAAA;cAAK0E,SAAS,EAAC,eAAe;cAAAC,QAAA,EAC3B,CAAC,GAAGO,KAAK,CAAClC,MAAM,CAACxB,YAAY,CAAC,CAAC,CAAC2D,GAAG,CAAC,CAACC,CAAC,EAAE1B,KAAK,kBAC5C1D,OAAA;gBAAkB0E,SAAS,EAAC,QAAQ;gBAAAC,QAAA,EAAC;cAAC,GAA3BjB,KAAK;gBAAAoB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAA4B,CAC7C;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eAENjF,OAAA;YAAG0E,SAAS,EAAC,oBAAoB;YAAAC,QAAA,EAAE3B,MAAM,CAACvB;UAAkB;YAAAqD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA,GAbzDjC,MAAM,CAACmB,gBAAgB;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAc5B,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC/E,EAAA,CAjPQD,WAAW;EAAA,QACCL,SAAS,EACXF,WAAW;AAAA;AAAAoG,EAAA,GAFrB7F,WAAW;AAmPpB,eAAeA,WAAW;AAAC,IAAA6F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}