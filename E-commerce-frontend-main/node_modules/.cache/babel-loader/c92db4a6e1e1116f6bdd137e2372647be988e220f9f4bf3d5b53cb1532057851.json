{"ast":null,"code":"var _jsxFileName = \"E:\\\\E-COMMERCE NEW\\\\E-commerce-frontend-main\\\\src\\\\components\\\\userspage\\\\UserManagementPage.jsx\",\n  _s = $RefreshSig$();\n// // components/UserManagementPage.js\n// import React, { useState, useEffect } from 'react';\n// import { Link } from 'react-router-dom';\n// import UserService from '../service/UserService';\n\n// function UserManagementPage() {\n//   const [users, setUsers] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch users data when the component mounts\n//     fetchUsers();\n//   }, []);\n\n//   const fetchUsers = async () => {\n//     try {\n\n//       const token = localStorage.getItem('token'); // Retrieve the token from localStorage\n//       const response = await UserService.getAllUsers(token);\n//       //   console.log(response);\n//       setUsers(response.ourUsersList); // Assuming the list of users is under the key 'ourUsersList'\n//     } catch (error) {\n//       console.error('Error fetching users:', error);\n//     }\n//   };\n\n//   const deleteUser = async (userId) => {\n//     try {\n//       // Prompt for confirmation before deleting the user\n//       const confirmDelete = window.confirm('Are you sure you want to delete this user?');\n\n//       const token = localStorage.getItem('token'); // Retrieve the token from localStorage\n//       if (confirmDelete) {\n//         await UserService.deleteUser(userId, token);\n//         // After deleting the user, fetch the updated list of users\n//         fetchUsers();\n//       }\n//     } catch (error) {\n//       console.error('Error deleting user:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"user-management-container\">\n//       <h2>Users Management Page</h2>\n//       <button className='reg-button'> <Link to=\"/register\">Add User</Link></button>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>ID</th>\n//             <th>Name</th>\n//             <th>Email</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {users.map(user => (\n//             <tr key={user.id}>\n//               <td>{user.id}</td>\n//               <td>{user.name}</td>\n//               <td>{user.email}</td>\n//               <td>\n//                 <button className='delete-button' onClick={() => deleteUser(user.id)}>Delete</button>\n//                 <button><Link to={`/update-product/${user.id}`}>\n//                   Update\n//                 </Link>\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default UserManagementPage;\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport UserService from '../service/UserService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserManagementPage() {\n  _s();\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    // Fetch users data when the component mounts\n    fetchUsers();\n  }, []);\n  const fetchUsers = async () => {\n    try {\n      const token = localStorage.getItem('token'); // Retrieve the token from localStorage\n      const response = await UserService.getAllUsers(token);\n      setUsers(response.ourUsersList); // Assuming the list of users is under the key 'ourUsersList'\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    }\n  };\n  const deleteUser = async userId => {\n    try {\n      // Prompt for confirmation before deleting the user\n      const confirmDelete = window.confirm('Are you sure you want to delete this user?');\n      const token = localStorage.getItem('token'); // Retrieve the token from localStorage\n      if (confirmDelete) {\n        await UserService.deleteUser(userId, token);\n        // After deleting the user, fetch the updated list of users\n        fetchUsers();\n      }\n    } catch (error) {\n      console.error('Error deleting user:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-management-container\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"user-management-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: users.map(user => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"action-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"delete-button\",\n              onClick: () => deleteUser(user.id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"update-button\",\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: `/update-product/${user.id}`,\n                children: \"Update\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)]\n        }, user.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(UserManagementPage, \"JadZszbqna06PpJs9hMo7Hl/LOY=\");\n_c = UserManagementPage;\nexport default UserManagementPage;\nvar _c;\n$RefreshReg$(_c, \"UserManagementPage\");","map":{"version":3,"names":["React","useState","useEffect","Link","UserService","jsxDEV","_jsxDEV","UserManagementPage","_s","users","setUsers","fetchUsers","token","localStorage","getItem","response","getAllUsers","ourUsersList","error","console","deleteUser","userId","confirmDelete","window","confirm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","user","id","name","email","onClick","to","_c","$RefreshReg$"],"sources":["E:/E-COMMERCE NEW/E-commerce-frontend-main/src/components/userspage/UserManagementPage.jsx"],"sourcesContent":["// // components/UserManagementPage.js\r\n// import React, { useState, useEffect } from 'react';\r\n// import { Link } from 'react-router-dom';\r\n// import UserService from '../service/UserService';\r\n\r\n// function UserManagementPage() {\r\n//   const [users, setUsers] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch users data when the component mounts\r\n//     fetchUsers();\r\n//   }, []);\r\n\r\n//   const fetchUsers = async () => {\r\n//     try {\r\n\r\n//       const token = localStorage.getItem('token'); // Retrieve the token from localStorage\r\n//       const response = await UserService.getAllUsers(token);\r\n//       //   console.log(response);\r\n//       setUsers(response.ourUsersList); // Assuming the list of users is under the key 'ourUsersList'\r\n//     } catch (error) {\r\n//       console.error('Error fetching users:', error);\r\n//     }\r\n//   };\r\n\r\n\r\n//   const deleteUser = async (userId) => {\r\n//     try {\r\n//       // Prompt for confirmation before deleting the user\r\n//       const confirmDelete = window.confirm('Are you sure you want to delete this user?');\r\n\r\n//       const token = localStorage.getItem('token'); // Retrieve the token from localStorage\r\n//       if (confirmDelete) {\r\n//         await UserService.deleteUser(userId, token);\r\n//         // After deleting the user, fetch the updated list of users\r\n//         fetchUsers();\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error deleting user:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"user-management-container\">\r\n//       <h2>Users Management Page</h2>\r\n//       <button className='reg-button'> <Link to=\"/register\">Add User</Link></button>\r\n//       <table>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>ID</th>\r\n//             <th>Name</th>\r\n//             <th>Email</th>\r\n//             <th>Actions</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {users.map(user => (\r\n//             <tr key={user.id}>\r\n//               <td>{user.id}</td>\r\n//               <td>{user.name}</td>\r\n//               <td>{user.email}</td>\r\n//               <td>\r\n//                 <button className='delete-button' onClick={() => deleteUser(user.id)}>Delete</button>\r\n//                 <button><Link to={`/update-product/${user.id}`}>\r\n//                   Update\r\n//                 </Link>\r\n//                 </button>\r\n//               </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default UserManagementPage;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport UserService from '../service/UserService';\r\n\r\nfunction UserManagementPage() {\r\n  const [users, setUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch users data when the component mounts\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token'); // Retrieve the token from localStorage\r\n      const response = await UserService.getAllUsers(token);\r\n      setUsers(response.ourUsersList); // Assuming the list of users is under the key 'ourUsersList'\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error);\r\n    }\r\n  };\r\n\r\n  const deleteUser = async (userId) => {\r\n    try {\r\n      // Prompt for confirmation before deleting the user\r\n      const confirmDelete = window.confirm('Are you sure you want to delete this user?');\r\n\r\n      const token = localStorage.getItem('token'); // Retrieve the token from localStorage\r\n      if (confirmDelete) {\r\n        await UserService.deleteUser(userId, token);\r\n        // After deleting the user, fetch the updated list of users\r\n        fetchUsers();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting user:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"user-management-container\">\r\n      <table className=\"user-management-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>ID</th>\r\n            <th>Name</th>\r\n            <th>Email</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {users.map(user => (\r\n            <tr key={user.id}>\r\n              <td>{user.id}</td>\r\n              <td>{user.name}</td>\r\n              <td>{user.email}</td>\r\n              <td className=\"action-buttons\">\r\n                <button className=\"delete-button\" onClick={() => deleteUser(user.id)}>Delete</button>\r\n                <button className=\"update-button\">\r\n                  <Link to={`/update-product/${user.id}`}>Update</Link>\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserManagementPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}