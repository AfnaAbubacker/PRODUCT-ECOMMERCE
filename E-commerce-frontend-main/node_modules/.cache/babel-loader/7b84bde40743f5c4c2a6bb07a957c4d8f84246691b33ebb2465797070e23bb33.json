{"ast":null,"code":"var _jsxFileName = \"E:\\\\E-COMMERCE NEW\\\\E-commerce-frontend-main\\\\src\\\\components\\\\pages\\\\ViewProduct.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate, Link, useParams } from 'react-router-dom';\n// import RatingReviewService from '../service/RatingReviewService';\n// import ProductService from '../service/ProductService';\n\n// function ViewProduct() {\n//   const { prodId } = useParams();\n//   const navigate = useNavigate();\n//   const userId = localStorage.getItem('userId');\n\n//   const [prodData, setProdData] = useState({\n//     product_name: '',\n//     product_price: '',\n//     product_description: '',\n//     product_image: null\n//   });\n\n//   const [reviews, setReviews] = useState([]);  // Always initialize with an empty array\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [editingReviewId, setEditingReviewId] = useState(null);\n\n//   const [formData, setFormData] = useState({\n//     rating_value: 0,\n//     review_description: '',\n//     product_id: prodId,\n//     user_id: userId\n//   });\n\n//   useEffect(() => {\n//     fetchProductDataById(prodId);\n//     checkIfReviewExists(prodId, userId);\n//   }, [prodId]);\n\n//   const fetchProductDataById = async (prodId) => {\n//     try {\n//       const response = await ProductService.getProductById(prodId);\n//       const { product_name, product_price, product_description, product_image } = response.singleProduct;\n//       setProdData({ product_name, product_price, product_description, product_image });\n//     } catch (error) {\n//       console.error('Error fetching product data:', error);\n//     }\n//   };\n\n//   const checkIfReviewExists = async (prodId, userId) => {\n//     try {\n//       const requestData = { product_id: prodId, user_id: userId };\n//       const reviewResponse = await RatingReviewService.getExistRatingReviewByUserId(requestData);\n//       setReviews(reviewResponse.ratingReviewDtoList || []);  // Ensure reviews is never undefined\n//     } catch (error) {\n//       console.error('Error checking review:', error);\n//       setReviews([]);  // In case of error, set reviews to an empty array\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleStarClick = (index) => {\n//     setFormData({ ...formData, rating_value: index + 1 });\n//   };\n\n//   const handleSubmitReview = async (e) => {\n//     e.preventDefault();\n//     try {\n//       if (isEditing) {\n//         // Update existing review\n//         await RatingReviewService.updateRatingReview(editingReviewId, formData);\n//         alert('Review updated successfully');\n//         setIsEditing(false);\n//         setEditingReviewId(null);\n//       } else {\n//         // Create new review\n//         await RatingReviewService.SaveRatingReview(formData);\n//         alert('Review submitted successfully');\n//       }\n//       setFormData({ rating_value: 0, review_description: '' });\n//       checkIfReviewExists(prodId, userId); // Refresh reviews\n//     } catch (error) {\n//       console.error('Error submitting review:', error);\n//       alert('An error occurred while submitting the review');\n//     }\n//   };\n\n//   const handleEditClick = (review) => {\n//     setIsEditing(true);\n//     setEditingReviewId(review.rating_review_id);\n//     setFormData({\n//       rating_value: review.rating_value,\n//       review_description: review.review_description,\n//       product_id: review.product_id,\n//       user_id: review.user_id\n//     });\n//   };\n\n//   return (\n//     <div className=\"view-product-container\">\n\n//       {/* Product Section */}\n//       <div className=\"product-content\">\n//         <div className=\"left-container\">\n//           <img\n//             src={`data:image/jpeg;base64,${prodData.product_image}`}\n//             alt={prodData.product_name}\n//             className=\"product-image\"\n//           />\n//         </div>\n//         <div className=\"right-container\">\n//           <h2 className=\"product-name\">{prodData.product_name}</h2>\n//           <p className=\"product-price\">${prodData.product_price}</p>\n//           <p className=\"product-description\">{prodData.product_description}</p>\n\n//           {/* Add/Edit Review Section */}\n//           <div className=\"add-review\">\n//             <h3>{isEditing ? 'Edit Your Review' : 'Write Your Review'}</h3>\n//             <div className=\"star-rating\">\n//               {[...Array(5)].map((_, index) => (\n//                 <span\n//                   key={index}\n//                   className={index < formData.rating_value ? 'filled' : 'empty'}\n//                   onClick={() => handleStarClick(index)}\n//                 >\n//                   ★\n//                 </span>\n//               ))}\n//             </div>\n//             <textarea\n//               className=\"review-textbox\"\n//               name=\"review_description\"\n//               placeholder=\"Write your review here...\"\n//               value={formData.review_description}\n//               onChange={handleInputChange}\n//               required\n//             ></textarea>\n//             <button onClick={handleSubmitReview} className=\"submit-review-button\">\n//               {isEditing ? 'Update Review' : 'Submit Review'}\n//             </button>\n//             <br />\n//             <Link to=\"/product-list\" className=\"back-link\">\n//               Back to Product List\n//             </Link>\n//           </div>\n\n//         </div>\n//       </div>\n\n//       {/* Existing Reviews Section */}\n//       {reviews.length > 0 && (\n//         <div className=\"existing-reviews\">\n//           <h3>Customer Reviews</h3>\n//           <div className=\"reviews-container\">\n//             {reviews.map((review) => (\n//               <div key={review.rating_review_id} className=\"review-card\">\n//                 <div className=\"review-header\">\n//                   <div className=\"review-rating\">\n//                     {[...Array(review.rating_value)].map((_, index) => (\n//                       <span key={index} className=\"filled\">★</span>\n//                     ))}\n//                   </div>\n//                   {review.user_id == userId && (\n//                     <button\n//                       className=\"edit-button\"\n//                       onClick={() => handleEditClick(review)}\n//                     >\n//                       Edit\n//                     </button>\n//                   )}\n//                 </div>\n//                 <p className=\"review-description\">{review.review_description}</p>\n//               </div>\n//             ))}\n//           </div>\n//         </div>    \n//       )}\n\n//     </div>\n//   );\n// }\n\n// export default ViewProduct;\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, Link, useParams } from 'react-router-dom';\nimport RatingReviewService from '../service/RatingReviewService';\nimport ProductService from '../service/ProductService';\nimport '../../style/viewproduct.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ViewProduct() {\n  _s();\n  const {\n    prodId\n  } = useParams();\n  const navigate = useNavigate();\n  const userId = localStorage.getItem('userId');\n  const [prodData, setProdData] = useState({\n    product_name: '',\n    product_price: '',\n    product_description: '',\n    product_image: null\n  });\n  const [reviews, setReviews] = useState([]);\n  const [isEditing, setIsEditing] = useState(false);\n  const [editingReviewId, setEditingReviewId] = useState(null);\n  const [formData, setFormData] = useState({\n    rating_value: 0,\n    review_description: '',\n    product_id: prodId,\n    user_id: userId\n  });\n  useEffect(() => {\n    fetchProductDataById(prodId);\n    checkIfReviewExists(prodId, userId);\n  }, [prodId]);\n  const fetchProductDataById = async prodId => {\n    try {\n      const response = await ProductService.getProductById(prodId);\n      const {\n        product_name,\n        product_price,\n        product_description,\n        product_image\n      } = response.singleProduct;\n      setProdData({\n        product_name,\n        product_price,\n        product_description,\n        product_image\n      });\n    } catch (error) {\n      console.error('Error fetching product data:', error);\n    }\n  };\n  const checkIfReviewExists = async (prodId, userId) => {\n    try {\n      const requestData = {\n        product_id: prodId,\n        user_id: userId\n      };\n      const reviewResponse = await RatingReviewService.getExistRatingReviewByUserId(requestData);\n      setReviews(reviewResponse.ratingReviewDtoList || []);\n    } catch (error) {\n      console.error('Error checking review:', error);\n      setReviews([]);\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleStarClick = index => {\n    setFormData({\n      ...formData,\n      rating_value: index + 1\n    });\n  };\n\n  // const handleSubmitReview = async (e) => {\n  //   e.preventDefault();\n  //   try {\n  //     if (isEditing) {\n  //       await RatingReviewService.updateRatingReview(editingReviewId, formData);\n  //       alert('Review updated successfully');\n  //       setIsEditing(false);\n  //       setEditingReviewId(null);\n  //     } else {\n  //       await RatingReviewService.SaveRatingReview(formData);\n  //       alert('Review submitted successfully');\n  //     }\n  //     setFormData({ rating_value: 0, review_description: '' });\n  //     checkIfReviewExists(prodId, userId);\n  //   } catch (error) {\n  //     console.error('Error submitting review:', error);\n  //     alert('An error occurred while submitting the review');\n  //   }\n  // };\n\n  const handleEditClick = review => {\n    setIsEditing(true);\n    setEditingReviewId(review.rating_review_id);\n    setFormData({\n      rating_value: review.rating_value,\n      review_description: review.review_description,\n      product_id: review.product_id,\n      user_id: review.user_id\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"view-product-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"product-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `data:image/jpeg;base64,${prodData.product_image}`,\n          alt: prodData.product_name,\n          className: \"product-image-view\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"product-name\",\n          children: prodData.product_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"product-price\",\n          children: [\"$\", prodData.product_price]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"product-description\",\n          children: prodData.product_description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add-review\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: isEditing ? 'Edit Your Review' : 'Write Your Review'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"star-rating\",\n            children: [...Array(5)].map((_, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: index < formData.rating_value ? 'filled' : 'empty',\n              onClick: () => handleStarClick(index),\n              children: \"\\u2605\"\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"review-textbox\",\n            name: \"review_description\",\n            placeholder: \"Write your review here...\",\n            value: formData.review_description,\n            onChange: handleInputChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSubmitReview,\n            className: \"submit-review-button\",\n            children: isEditing ? 'Update Review' : 'Submit Review'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/product-list\",\n            className: \"back-link\",\n            children: \"Back to Product List\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), reviews.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"existing-reviews\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Customer Reviews\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reviews-container\",\n        children: reviews.map(review => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"review-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"review-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"review-rating\",\n              children: [...Array(review.rating_value)].map((_, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"filled\",\n                children: \"\\u2605\"\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 19\n            }, this), review.user_id == userId && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"edit-button\",\n              onClick: () => handleEditClick(review),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"review-description\",\n            children: review.review_description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 17\n          }, this)]\n        }, review.rating_review_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 5\n  }, this);\n}\n_s(ViewProduct, \"GzKB4J/G/nH/nllbRboKaDDzJFo=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ViewProduct;\nexport default ViewProduct;\nvar _c;\n$RefreshReg$(_c, \"ViewProduct\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Link","useParams","RatingReviewService","ProductService","jsxDEV","_jsxDEV","ViewProduct","_s","prodId","navigate","userId","localStorage","getItem","prodData","setProdData","product_name","product_price","product_description","product_image","reviews","setReviews","isEditing","setIsEditing","editingReviewId","setEditingReviewId","formData","setFormData","rating_value","review_description","product_id","user_id","fetchProductDataById","checkIfReviewExists","response","getProductById","singleProduct","error","console","requestData","reviewResponse","getExistRatingReviewByUserId","ratingReviewDtoList","handleInputChange","e","name","value","target","handleStarClick","index","handleEditClick","review","rating_review_id","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","Array","map","_","onClick","placeholder","onChange","required","handleSubmitReview","to","length","_c","$RefreshReg$"],"sources":["E:/E-COMMERCE NEW/E-commerce-frontend-main/src/components/pages/ViewProduct.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { useNavigate, Link, useParams } from 'react-router-dom';\r\n// import RatingReviewService from '../service/RatingReviewService';\r\n// import ProductService from '../service/ProductService';\r\n\r\n\r\n// function ViewProduct() {\r\n//   const { prodId } = useParams();\r\n//   const navigate = useNavigate();\r\n//   const userId = localStorage.getItem('userId');\r\n\r\n//   const [prodData, setProdData] = useState({\r\n//     product_name: '',\r\n//     product_price: '',\r\n//     product_description: '',\r\n//     product_image: null\r\n//   });\r\n\r\n//   const [reviews, setReviews] = useState([]);  // Always initialize with an empty array\r\n//   const [isEditing, setIsEditing] = useState(false);\r\n//   const [editingReviewId, setEditingReviewId] = useState(null);\r\n\r\n//   const [formData, setFormData] = useState({\r\n//     rating_value: 0,\r\n//     review_description: '',\r\n//     product_id: prodId,\r\n//     user_id: userId\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     fetchProductDataById(prodId);\r\n//     checkIfReviewExists(prodId, userId);\r\n//   }, [prodId]);\r\n\r\n//   const fetchProductDataById = async (prodId) => {\r\n//     try {\r\n//       const response = await ProductService.getProductById(prodId);\r\n//       const { product_name, product_price, product_description, product_image } = response.singleProduct;\r\n//       setProdData({ product_name, product_price, product_description, product_image });\r\n//     } catch (error) {\r\n//       console.error('Error fetching product data:', error);\r\n//     }\r\n//   };\r\n\r\n//   const checkIfReviewExists = async (prodId, userId) => {\r\n//     try {\r\n//       const requestData = { product_id: prodId, user_id: userId };\r\n//       const reviewResponse = await RatingReviewService.getExistRatingReviewByUserId(requestData);\r\n//       setReviews(reviewResponse.ratingReviewDtoList || []);  // Ensure reviews is never undefined\r\n//     } catch (error) {\r\n//       console.error('Error checking review:', error);\r\n//       setReviews([]);  // In case of error, set reviews to an empty array\r\n//     }\r\n//   };\r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData({ ...formData, [name]: value });\r\n//   };\r\n\r\n//   const handleStarClick = (index) => {\r\n//     setFormData({ ...formData, rating_value: index + 1 });\r\n//   };\r\n\r\n//   const handleSubmitReview = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       if (isEditing) {\r\n//         // Update existing review\r\n//         await RatingReviewService.updateRatingReview(editingReviewId, formData);\r\n//         alert('Review updated successfully');\r\n//         setIsEditing(false);\r\n//         setEditingReviewId(null);\r\n//       } else {\r\n//         // Create new review\r\n//         await RatingReviewService.SaveRatingReview(formData);\r\n//         alert('Review submitted successfully');\r\n//       }\r\n//       setFormData({ rating_value: 0, review_description: '' });\r\n//       checkIfReviewExists(prodId, userId); // Refresh reviews\r\n//     } catch (error) {\r\n//       console.error('Error submitting review:', error);\r\n//       alert('An error occurred while submitting the review');\r\n//     }\r\n//   };\r\n\r\n//   const handleEditClick = (review) => {\r\n//     setIsEditing(true);\r\n//     setEditingReviewId(review.rating_review_id);\r\n//     setFormData({\r\n//       rating_value: review.rating_value,\r\n//       review_description: review.review_description,\r\n//       product_id: review.product_id,\r\n//       user_id: review.user_id\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"view-product-container\">\r\n    \r\n\r\n//       {/* Product Section */}\r\n//       <div className=\"product-content\">\r\n//         <div className=\"left-container\">\r\n//           <img\r\n//             src={`data:image/jpeg;base64,${prodData.product_image}`}\r\n//             alt={prodData.product_name}\r\n//             className=\"product-image\"\r\n//           />\r\n//         </div>\r\n//         <div className=\"right-container\">\r\n//           <h2 className=\"product-name\">{prodData.product_name}</h2>\r\n//           <p className=\"product-price\">${prodData.product_price}</p>\r\n//           <p className=\"product-description\">{prodData.product_description}</p>\r\n\r\n//           {/* Add/Edit Review Section */}\r\n//           <div className=\"add-review\">\r\n//             <h3>{isEditing ? 'Edit Your Review' : 'Write Your Review'}</h3>\r\n//             <div className=\"star-rating\">\r\n//               {[...Array(5)].map((_, index) => (\r\n//                 <span\r\n//                   key={index}\r\n//                   className={index < formData.rating_value ? 'filled' : 'empty'}\r\n//                   onClick={() => handleStarClick(index)}\r\n//                 >\r\n//                   ★\r\n//                 </span>\r\n//               ))}\r\n//             </div>\r\n//             <textarea\r\n//               className=\"review-textbox\"\r\n//               name=\"review_description\"\r\n//               placeholder=\"Write your review here...\"\r\n//               value={formData.review_description}\r\n//               onChange={handleInputChange}\r\n//               required\r\n//             ></textarea>\r\n//             <button onClick={handleSubmitReview} className=\"submit-review-button\">\r\n//               {isEditing ? 'Update Review' : 'Submit Review'}\r\n//             </button>\r\n//             <br />\r\n//             <Link to=\"/product-list\" className=\"back-link\">\r\n//               Back to Product List\r\n//             </Link>\r\n//           </div>\r\n\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Existing Reviews Section */}\r\n//       {reviews.length > 0 && (\r\n//         <div className=\"existing-reviews\">\r\n//           <h3>Customer Reviews</h3>\r\n//           <div className=\"reviews-container\">\r\n//             {reviews.map((review) => (\r\n//               <div key={review.rating_review_id} className=\"review-card\">\r\n//                 <div className=\"review-header\">\r\n//                   <div className=\"review-rating\">\r\n//                     {[...Array(review.rating_value)].map((_, index) => (\r\n//                       <span key={index} className=\"filled\">★</span>\r\n//                     ))}\r\n//                   </div>\r\n//                   {review.user_id == userId && (\r\n//                     <button\r\n//                       className=\"edit-button\"\r\n//                       onClick={() => handleEditClick(review)}\r\n//                     >\r\n//                       Edit\r\n//                     </button>\r\n//                   )}\r\n//                 </div>\r\n//                 <p className=\"review-description\">{review.review_description}</p>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>    \r\n//       )}\r\n\r\n\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ViewProduct;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate, Link, useParams } from 'react-router-dom';\r\nimport RatingReviewService from '../service/RatingReviewService';\r\nimport ProductService from '../service/ProductService';\r\nimport '../../style/viewproduct.css';\r\n\r\nfunction ViewProduct() {\r\n  const { prodId } = useParams();\r\n  const navigate = useNavigate();\r\n  const userId = localStorage.getItem('userId');\r\n\r\n  const [prodData, setProdData] = useState({\r\n    product_name: '',\r\n    product_price: '',\r\n    product_description: '',\r\n    product_image: null\r\n  });\r\n\r\n  const [reviews, setReviews] = useState([]);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editingReviewId, setEditingReviewId] = useState(null);\r\n\r\n  const [formData, setFormData] = useState({\r\n    rating_value: 0,\r\n    review_description: '',\r\n    product_id: prodId,\r\n    user_id: userId\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchProductDataById(prodId);\r\n    checkIfReviewExists(prodId, userId);\r\n  }, [prodId]);\r\n\r\n  const fetchProductDataById = async (prodId) => {\r\n    try {\r\n      const response = await ProductService.getProductById(prodId);\r\n      const { product_name, product_price, product_description, product_image } = response.singleProduct;\r\n      setProdData({ product_name, product_price, product_description, product_image });\r\n    } catch (error) {\r\n      console.error('Error fetching product data:', error);\r\n    }\r\n  };\r\n\r\n  const checkIfReviewExists = async (prodId, userId) => {\r\n    try {\r\n      const requestData = { product_id: prodId, user_id: userId };\r\n      const reviewResponse = await RatingReviewService.getExistRatingReviewByUserId(requestData);\r\n      setReviews(reviewResponse.ratingReviewDtoList || []);\r\n    } catch (error) {\r\n      console.error('Error checking review:', error);\r\n      setReviews([]);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleStarClick = (index) => {\r\n    setFormData({ ...formData, rating_value: index + 1 });\r\n  };\r\n\r\n  // const handleSubmitReview = async (e) => {\r\n  //   e.preventDefault();\r\n  //   try {\r\n  //     if (isEditing) {\r\n  //       await RatingReviewService.updateRatingReview(editingReviewId, formData);\r\n  //       alert('Review updated successfully');\r\n  //       setIsEditing(false);\r\n  //       setEditingReviewId(null);\r\n  //     } else {\r\n  //       await RatingReviewService.SaveRatingReview(formData);\r\n  //       alert('Review submitted successfully');\r\n  //     }\r\n  //     setFormData({ rating_value: 0, review_description: '' });\r\n  //     checkIfReviewExists(prodId, userId);\r\n  //   } catch (error) {\r\n  //     console.error('Error submitting review:', error);\r\n  //     alert('An error occurred while submitting the review');\r\n  //   }\r\n  // };\r\n\r\n  const handleEditClick = (review) => {\r\n    setIsEditing(true);\r\n    setEditingReviewId(review.rating_review_id);\r\n    setFormData({\r\n      rating_value: review.rating_value,\r\n      review_description: review.review_description,\r\n      product_id: review.product_id,\r\n      user_id: review.user_id\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"view-product-container\">\r\n      \r\n\r\n      <div className=\"product-content\">\r\n        <div className=\"left-container\">\r\n          <img\r\n            src={`data:image/jpeg;base64,${prodData.product_image}`}\r\n            alt={prodData.product_name}\r\n            className=\"product-image-view\"\r\n          />\r\n        </div>\r\n        <div className=\"right-container\">\r\n          <h2 className=\"product-name\">{prodData.product_name}</h2>\r\n          <p className=\"product-price\">${prodData.product_price}</p>\r\n          <p className=\"product-description\">{prodData.product_description}</p>\r\n\r\n          <div className=\"add-review\">\r\n            <h3>{isEditing ? 'Edit Your Review' : 'Write Your Review'}</h3>\r\n            <div className=\"star-rating\">\r\n              {[...Array(5)].map((_, index) => (\r\n                <span\r\n                  key={index}\r\n                  className={index < formData.rating_value ? 'filled' : 'empty'}\r\n                  onClick={() => handleStarClick(index)}\r\n                >\r\n                  ★\r\n                </span>\r\n              ))}\r\n            </div>\r\n            <textarea\r\n              className=\"review-textbox\"\r\n              name=\"review_description\"\r\n              placeholder=\"Write your review here...\"\r\n              value={formData.review_description}\r\n              onChange={handleInputChange}\r\n              required\r\n            ></textarea>\r\n            <button onClick={handleSubmitReview} className=\"submit-review-button\">\r\n              {isEditing ? 'Update Review' : 'Submit Review'}\r\n            </button>\r\n            <br />\r\n            <Link to=\"/product-list\" className=\"back-link\">\r\n              Back to Product List\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {reviews.length > 0 && (\r\n        <div className=\"existing-reviews\">\r\n          <h3>Customer Reviews</h3>\r\n          <div className=\"reviews-container\">\r\n            {reviews.map((review) => (\r\n              <div key={review.rating_review_id} className=\"review-card\">\r\n                <div className=\"review-header\">\r\n                  <div className=\"review-rating\">\r\n                    {[...Array(review.rating_value)].map((_, index) => (\r\n                      <span key={index} className=\"filled\">★</span>\r\n                    ))}\r\n                  </div>\r\n                  {review.user_id == userId && (\r\n                    <button\r\n                      className=\"edit-button\"\r\n                      onClick={() => handleEditClick(review)}\r\n                    >\r\n                      Edit\r\n                    </button>\r\n                  )}\r\n                </div>\r\n                <p className=\"review-description\">{review.review_description}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewProduct;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,IAAI,EAAEC,SAAS,QAAQ,kBAAkB;AAC/D,OAAOC,mBAAmB,MAAM,gCAAgC;AAChE,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAO,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAO,CAAC,GAAGP,SAAS,CAAC,CAAC;EAC9B,MAAMQ,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAMW,MAAM,GAAGC,YAAY,CAACC,O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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}