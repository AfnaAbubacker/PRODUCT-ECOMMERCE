{"ast":null,"code":"var _jsxFileName = \"D:\\\\E-COMMERCE-NEW WORKING\\\\E-COMMERCE-NEW\\\\E-commerce-frontend-main\\\\src\\\\components\\\\pages\\\\ViewProduct.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate, Link, useParams } from 'react-router-dom';\n// import RatingReviewService from '../service/RatingReviewService';\n// import ProductService from '../service/ProductService';\n// import '../../style/viewproduct.css';\n\n// function ViewProduct() {\n//   const { prodId } = useParams();\n//   const navigate = useNavigate();\n//   const userId = localStorage.getItem('userId');\n\n//   const [prodData, setProdData] = useState({\n//     product_name: '',\n//     product_price: '',\n//     product_description: '',\n//     product_image: null,\n//   });\n\n//   const [reviews, setReviews] = useState([]);\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [editingReviewId, setEditingReviewId] = useState(null);\n\n//   const [formData, setFormData] = useState({\n//     rating_value: 0,\n//     review_description: '',\n//     product_id: prodId,\n//     user_id: userId,\n//   });\n\n//   useEffect(() => {\n//     fetchProductDataById(prodId);\n//     checkIfReviewExists(prodId, userId);\n//   }, [prodId]);\n\n//   const fetchProductDataById = async (prodId) => {\n//     try {\n//       const response = await ProductService.getProductById(prodId);\n//       const { product_name, product_price, product_description, product_image } = response.singleProduct;\n//       setProdData({ product_name, product_price, product_description, product_image });\n//     } catch (error) {\n//       console.error('Error fetching product data:', error);\n//     }\n//   };\n\n//   const checkIfReviewExists = async (prodId, userId) => {\n//     try {\n//       const requestData = { product_id: prodId, user_id: userId };\n//       const reviewResponse = await RatingReviewService.getExistRatingReviewByUserId(requestData);\n\n//       const reviewsList = reviewResponse.ratingReviewDtoList || [];\n//       console.log(reviewsList);\n//       setReviews(reviewsList);\n//     } catch (error) {\n//       console.error('Error checking review:', error);\n//       setReviews([]);\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleStarClick = (index) => {\n//     setFormData({ ...formData, rating_value: index + 1 });\n//   };\n\n//   const handleSubmitReview = async (e) => {\n//     e.preventDefault();\n//     if (!isEditing) {\n//       const existingReview = reviews.find((review) => review.user_id == userId);\n//       if (existingReview) {\n//         alert('You have already submitted a review for this product.');\n//         setFormData({ rating_value: 0, review_description: '' });\n//         return;\n//       }\n//     }\n\n//     try {\n//       if (isEditing) {\n//         await RatingReviewService.updateReviewRatingDetails(editingReviewId, formData); // Update the existing review\n//         alert('Review updated successfully');\n//         setIsEditing(false);\n//         setEditingReviewId(null);\n//       } else {\n//         await RatingReviewService.SaveRatingReview(formData); // Submit a new review\n//         alert('Review submitted successfully');\n//       }\n\n//       // Reset form and refresh reviews\n//       setFormData({ rating_value: 0, review_description: '' });\n//       checkIfReviewExists(prodId, userId);\n//     } catch (error) {\n//       console.error('Error submitting review:', error);\n//       alert('An error occurred while submitting the review');\n//     }\n//   };\n\n//   const handleEditClick = (review) => {\n//     setIsEditing(true);\n//     setEditingReviewId(review.rating_review_id);\n//     setFormData({\n//       rating_value: review.rating_value,\n//       review_description: review.review_description,\n//       product_id: review.product_id,\n//       user_id: review.user_id,\n//     });\n//   };\n\n//   const handleDeleteClick = async (reviewId) => {\n//     const confirmDelete = window.confirm('Are you sure you want to delete this review?');\n//     if (confirmDelete) {\n//       try {\n//         await RatingReviewService.deleteReviewRatingById(reviewId); // Call delete service\n//         alert('Review deleted successfully');\n//         checkIfReviewExists(prodId, userId); // Refresh reviews\n//       } catch (error) {\n//         console.error('Error deleting review:', error);\n//         alert('An error occurred while deleting the review');\n//       }\n//     }else{\n//       return;\n//     }\n\n//   };\n\n//   return (\n//     <div className=\"view-product-container\">\n//       <div className=\"product-content\">\n//         <div className=\"left-container\">\n//           <img\n//             src={`data:image/jpeg;base64,${prodData.product_image}`}\n//             alt={prodData.product_name}\n//             className=\"product-image-view\"\n//           />\n//         </div>\n//         <div className=\"right-container\">\n//           <h2 className=\"product-name\">{prodData.product_name}</h2>\n//           <p className=\"product-price\">${prodData.product_price}</p>\n//           <p className=\"product-description\">{prodData.product_description}</p>\n\n//           <div className=\"add-review\">\n//             <h3>{isEditing ? 'Edit Your Review' : 'Write Your Review'}</h3>\n//             <div className=\"star-rating\">\n//               {[...Array(5)].map((_, index) => (\n//                 <span\n//                   key={index}\n//                   className={index < formData.rating_value ? 'filled' : 'empty'}\n//                   onClick={() => handleStarClick(index)}\n//                 >\n//                   ★\n//                 </span>\n//               ))}\n//             </div>\n//             <textarea\n//               className=\"review-textbox\"\n//               name=\"review_description\"\n//               placeholder=\"Write your review here...\"\n//               value={formData.review_description}\n//               onChange={handleInputChange}\n//               required\n//             ></textarea>\n//             <button onClick={handleSubmitReview} className=\"submit-review-button\">\n//               {isEditing ? 'Update Review' : 'Submit Review'}\n//             </button>\n//             <br />\n//             <Link to=\"/product-list\" className=\"back-link\">\n//               Back to Product List\n//             </Link>\n//           </div>\n//         </div>\n//       </div>\n\n//       {reviews.length > 0 && (\n//         <div className=\"existing-reviews\">\n//           <h3>Customer Reviews</h3>\n//           <div className=\"reviews-container\">\n//             {reviews.map((review) => (\n//               <div key={review.rating_review_id} className=\"review-card\">\n//              <p style={{ textTransform: \"uppercase\" }}>{review.user_name}</p>\n\n//                 <div className=\"review-header\">\n//                   <div className=\"review-rating\">\n//                     {[...Array(review.rating_value)].map((_, index) => (\n//                       <span key={index} className=\"filled\">★</span>\n//                     ))}\n//                   </div>\n//                   <div className=\"buttons\">\n//                     <button className=\"edit-button\" onClick={() => handleEditClick(review)}>\n//                       Edit\n//                     </button>\n//                     <button className=\"delete-button\" onClick={() => handleDeleteClick(review.rating_review_id)}>\n//                       Delete\n//                     </button>\n//                   </div>\n//                 </div>\n\n//                 <p className=\"review-description\">{review.review_description}</p>\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ViewProduct;\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, Link, useParams } from 'react-router-dom';\nimport RatingReviewService from '../service/RatingReviewService';\nimport ProductService from '../service/ProductService';\nimport '../../style/viewproduct.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ViewProduct() {\n  _s();\n  const {\n    prodId\n  } = useParams();\n  const navigate = useNavigate();\n  const userId = localStorage.getItem('userId');\n  const [prodData, setProdData] = useState({\n    product_name: '',\n    product_price: '',\n    product_description: '',\n    product_image: null\n  });\n  const [userReview, setUserReview] = useState(null); // Logged-in user's review\n  const [otherReviews, setOtherReviews] = useState([]); // Other users' reviews\n\n  const [formData, setFormData] = useState({\n    rating_value: 0,\n    review_description: '',\n    product_id: prodId,\n    user_id: userId\n  });\n  const [isEditing, setIsEditing] = useState(false);\n  const [editingReviewId, setEditingReviewId] = useState(null);\n  useEffect(() => {\n    fetchProductDataById(prodId);\n    fetchReviews(prodId, userId);\n  }, [prodId]);\n  const fetchProductDataById = async prodId => {\n    try {\n      const response = await ProductService.getProductById(prodId);\n      const {\n        product_name,\n        product_price,\n        product_description,\n        product_image\n      } = response.singleProduct;\n      setProdData({\n        product_name,\n        product_price,\n        product_description,\n        product_image\n      });\n    } catch (error) {\n      console.error('Error fetching product data:', error);\n    }\n  };\n  const fetchReviews = async (prodId, userId) => {\n    try {\n      const requestData = {\n        product_id: prodId,\n        user_id: userId\n      };\n      const reviewResponse = await RatingReviewService.getExistRatingReviewByUserId(requestData);\n      const reviewsList = reviewResponse.ratingReviewDtoList || [];\n\n      // Separate logged-in user's review and other reviews\n      const userReviewData = reviewsList.find(review => review.user_id == userId);\n      const otherUserReviews = reviewsList.filter(review => review.user_id != userId);\n      setUserReview(userReviewData || null);\n      setOtherReviews(otherUserReviews);\n      con;\n    } catch (error) {\n      console.error('Error fetching reviews:', error);\n      setUserReview(null);\n      setOtherReviews([]);\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleStarClick = index => {\n    setFormData({\n      ...formData,\n      rating_value: index + 1\n    });\n  };\n  const handleSubmitReview = async e => {\n    e.preventDefault();\n    if (!isEditing && userReview) {\n      alert('You have already submitted a review for this product.');\n      setFormData({\n        rating_value: 0,\n        review_description: ''\n      });\n      return;\n    }\n    try {\n      if (isEditing) {\n        await RatingReviewService.updateReviewRatingDetails(editingReviewId, formData); // Update the existing review\n        alert('Review updated successfully');\n        setIsEditing(false);\n        setEditingReviewId(null);\n      } else {\n        await RatingReviewService.SaveRatingReview(formData); // Submit a new review\n        alert('Review submitted successfully');\n      }\n\n      // Reset form and refresh reviews\n      setFormData({\n        rating_value: 0,\n        review_description: ''\n      });\n      fetchReviews(prodId, userId);\n    } catch (error) {\n      console.error('Error submitting review:', error);\n      alert('An error occurred while submitting the review');\n    }\n  };\n  const handleEditClick = review => {\n    setIsEditing(true);\n    setEditingReviewId(review.rating_review_id);\n    setFormData({\n      rating_value: review.rating_value,\n      review_description: review.review_description,\n      product_id: review.product_id,\n      user_id: review.user_id\n    });\n  };\n  const handleDeleteClick = async reviewId => {\n    const confirmDelete = window.confirm('Are you sure you want to delete this review?');\n    if (confirmDelete) {\n      try {\n        await RatingReviewService.deleteReviewRatingById(reviewId); // Call delete service\n        alert('Review deleted successfully');\n        fetchReviews(prodId, userId); // Refresh reviews\n      } catch (error) {\n        console.error('Error deleting review:', error);\n        alert('An error occurred while deleting the review');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"view-product-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"product-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `data:image/jpeg;base64,${prodData.product_image}`,\n          alt: prodData.product_name,\n          className: \"product-image-view\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"product-name\",\n          children: prodData.product_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"product-price\",\n          children: [\"$\", prodData.product_price]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"product-description\",\n          children: prodData.product_description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add-review\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: isEditing ? 'Edit Your Review' : 'Write Your Review'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"star-rating\",\n            children: [...Array(5)].map((_, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: index < formData.rating_value ? 'filled' : 'empty',\n              onClick: () => handleStarClick(index),\n              children: \"\\u2605\"\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"review-textbox\",\n            name: \"review_description\",\n            placeholder: \"Write your review here...\",\n            value: formData.review_description,\n            onChange: handleInputChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSubmitReview,\n            className: \"submit-review-button\",\n            children: isEditing ? 'Update Review' : 'Submit Review'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/product-list\",\n            className: \"back-link\",\n            children: \"Back to Product List\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this), userReview && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-review\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your Review\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"review-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            textTransform: \"uppercase\"\n          },\n          children: userReview.user_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"review-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"review-rating\",\n            children: [...Array(userReview.rating_value)].map((_, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"filled\",\n              children: \"\\u2605\"\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"edit-button\",\n              onClick: () => handleEditClick(userReview),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"delete-button\",\n              onClick: () => handleDeleteClick(userReview.rating_review_id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"review-description\",\n          children: userReview.review_description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 9\n    }, this), otherReviews.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"other-reviews\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Other Customer Reviews\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reviews-container\",\n        children: otherReviews.map(review => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"review-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              textTransform: \"uppercase\"\n            },\n            children: review.user_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"review-header\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"review-rating\",\n              children: [...Array(review.rating_value)].map((_, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"filled\",\n                children: \"\\u2605\"\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 428,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"review-description\",\n            children: review.review_description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 17\n          }, this)]\n        }, review.rating_review_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 347,\n    columnNumber: 5\n  }, this);\n}\n_s(ViewProduct, \"wcQPI8N8UQtwrZGyG8lk0ALEU6k=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ViewProduct;\nexport default ViewProduct;\nvar _c;\n$RefreshReg$(_c, \"ViewProduct\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Link","useParams","RatingReviewService","ProductService","jsxDEV","_jsxDEV","ViewProduct","_s","prodId","navigate","userId","localStorage","getItem","prodData","setProdData","product_name","product_price","product_description","product_image","userReview","setUserReview","otherReviews","setOtherReviews","formData","setFormData","rating_value","review_description","product_id","user_id","isEditing","setIsEditing","editingReviewId","setEditingReviewId","fetchProductDataById","fetchReviews","response","getProductById","singleProduct","error","console","requestData","reviewResponse","getExistRatingReviewByUserId","reviewsList","ratingReviewDtoList","userReviewData","find","review","otherUserReviews","filter","con","handleInputChange","e","name","value","target","handleStarClick","index","handleSubmitReview","preventDefault","alert","updateReviewRatingDetails","SaveRatingReview","handleEditClick","rating_review_id","handleDeleteClick","reviewId","confirmDelete","window","confirm","deleteReviewRatingById","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","Array","map","_","onClick","placeholder","onChange","required","to","style","textTransform","user_name","length","_c","$RefreshReg$"],"sources":["D:/E-COMMERCE-NEW WORKING/E-COMMERCE-NEW/E-commerce-frontend-main/src/components/pages/ViewProduct.jsx"],"sourcesContent":["\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useNavigate, Link, useParams } from 'react-router-dom';\r\n// import RatingReviewService from '../service/RatingReviewService';\r\n// import ProductService from '../service/ProductService';\r\n// import '../../style/viewproduct.css';\r\n\r\n// function ViewProduct() {\r\n//   const { prodId } = useParams();\r\n//   const navigate = useNavigate();\r\n//   const userId = localStorage.getItem('userId');\r\n\r\n//   const [prodData, setProdData] = useState({\r\n//     product_name: '',\r\n//     product_price: '',\r\n//     product_description: '',\r\n//     product_image: null,\r\n//   });\r\n\r\n//   const [reviews, setReviews] = useState([]);\r\n//   const [isEditing, setIsEditing] = useState(false);\r\n//   const [editingReviewId, setEditingReviewId] = useState(null);\r\n\r\n//   const [formData, setFormData] = useState({\r\n//     rating_value: 0,\r\n//     review_description: '',\r\n//     product_id: prodId,\r\n//     user_id: userId,\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     fetchProductDataById(prodId);\r\n//     checkIfReviewExists(prodId, userId);\r\n//   }, [prodId]);\r\n\r\n//   const fetchProductDataById = async (prodId) => {\r\n//     try {\r\n//       const response = await ProductService.getProductById(prodId);\r\n//       const { product_name, product_price, product_description, product_image } = response.singleProduct;\r\n//       setProdData({ product_name, product_price, product_description, product_image });\r\n//     } catch (error) {\r\n//       console.error('Error fetching product data:', error);\r\n//     }\r\n//   };\r\n\r\n//   const checkIfReviewExists = async (prodId, userId) => {\r\n//     try {\r\n//       const requestData = { product_id: prodId, user_id: userId };\r\n//       const reviewResponse = await RatingReviewService.getExistRatingReviewByUserId(requestData);\r\n\r\n//       const reviewsList = reviewResponse.ratingReviewDtoList || [];\r\n//       console.log(reviewsList);\r\n//       setReviews(reviewsList);\r\n//     } catch (error) {\r\n//       console.error('Error checking review:', error);\r\n//       setReviews([]);\r\n//     }\r\n//   };\r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData({ ...formData, [name]: value });\r\n//   };\r\n\r\n//   const handleStarClick = (index) => {\r\n//     setFormData({ ...formData, rating_value: index + 1 });\r\n//   };\r\n\r\n//   const handleSubmitReview = async (e) => {\r\n//     e.preventDefault();\r\n//     if (!isEditing) {\r\n//       const existingReview = reviews.find((review) => review.user_id == userId);\r\n//       if (existingReview) {\r\n//         alert('You have already submitted a review for this product.');\r\n//         setFormData({ rating_value: 0, review_description: '' });\r\n//         return;\r\n//       }\r\n//     }\r\n\r\n//     try {\r\n//       if (isEditing) {\r\n//         await RatingReviewService.updateReviewRatingDetails(editingReviewId, formData); // Update the existing review\r\n//         alert('Review updated successfully');\r\n//         setIsEditing(false);\r\n//         setEditingReviewId(null);\r\n//       } else {\r\n//         await RatingReviewService.SaveRatingReview(formData); // Submit a new review\r\n//         alert('Review submitted successfully');\r\n//       }\r\n\r\n//       // Reset form and refresh reviews\r\n//       setFormData({ rating_value: 0, review_description: '' });\r\n//       checkIfReviewExists(prodId, userId);\r\n//     } catch (error) {\r\n//       console.error('Error submitting review:', error);\r\n//       alert('An error occurred while submitting the review');\r\n//     }\r\n//   };\r\n\r\n//   const handleEditClick = (review) => {\r\n//     setIsEditing(true);\r\n//     setEditingReviewId(review.rating_review_id);\r\n//     setFormData({\r\n//       rating_value: review.rating_value,\r\n//       review_description: review.review_description,\r\n//       product_id: review.product_id,\r\n//       user_id: review.user_id,\r\n//     });\r\n//   };\r\n\r\n//   const handleDeleteClick = async (reviewId) => {\r\n//     const confirmDelete = window.confirm('Are you sure you want to delete this review?');\r\n//     if (confirmDelete) {\r\n//       try {\r\n//         await RatingReviewService.deleteReviewRatingById(reviewId); // Call delete service\r\n//         alert('Review deleted successfully');\r\n//         checkIfReviewExists(prodId, userId); // Refresh reviews\r\n//       } catch (error) {\r\n//         console.error('Error deleting review:', error);\r\n//         alert('An error occurred while deleting the review');\r\n//       }\r\n//     }else{\r\n//       return;\r\n//     }\r\n   \r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"view-product-container\">\r\n//       <div className=\"product-content\">\r\n//         <div className=\"left-container\">\r\n//           <img\r\n//             src={`data:image/jpeg;base64,${prodData.product_image}`}\r\n//             alt={prodData.product_name}\r\n//             className=\"product-image-view\"\r\n//           />\r\n//         </div>\r\n//         <div className=\"right-container\">\r\n//           <h2 className=\"product-name\">{prodData.product_name}</h2>\r\n//           <p className=\"product-price\">${prodData.product_price}</p>\r\n//           <p className=\"product-description\">{prodData.product_description}</p>\r\n\r\n//           <div className=\"add-review\">\r\n//             <h3>{isEditing ? 'Edit Your Review' : 'Write Your Review'}</h3>\r\n//             <div className=\"star-rating\">\r\n//               {[...Array(5)].map((_, index) => (\r\n//                 <span\r\n//                   key={index}\r\n//                   className={index < formData.rating_value ? 'filled' : 'empty'}\r\n//                   onClick={() => handleStarClick(index)}\r\n//                 >\r\n//                   ★\r\n//                 </span>\r\n//               ))}\r\n//             </div>\r\n//             <textarea\r\n//               className=\"review-textbox\"\r\n//               name=\"review_description\"\r\n//               placeholder=\"Write your review here...\"\r\n//               value={formData.review_description}\r\n//               onChange={handleInputChange}\r\n//               required\r\n//             ></textarea>\r\n//             <button onClick={handleSubmitReview} className=\"submit-review-button\">\r\n//               {isEditing ? 'Update Review' : 'Submit Review'}\r\n//             </button>\r\n//             <br />\r\n//             <Link to=\"/product-list\" className=\"back-link\">\r\n//               Back to Product List\r\n//             </Link>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {reviews.length > 0 && (\r\n//         <div className=\"existing-reviews\">\r\n//           <h3>Customer Reviews</h3>\r\n//           <div className=\"reviews-container\">\r\n//             {reviews.map((review) => (\r\n//               <div key={review.rating_review_id} className=\"review-card\">\r\n//              <p style={{ textTransform: \"uppercase\" }}>{review.user_name}</p>\r\n\r\n//                 <div className=\"review-header\">\r\n//                   <div className=\"review-rating\">\r\n//                     {[...Array(review.rating_value)].map((_, index) => (\r\n//                       <span key={index} className=\"filled\">★</span>\r\n//                     ))}\r\n//                   </div>\r\n//                   <div className=\"buttons\">\r\n//                     <button className=\"edit-button\" onClick={() => handleEditClick(review)}>\r\n//                       Edit\r\n//                     </button>\r\n//                     <button className=\"delete-button\" onClick={() => handleDeleteClick(review.rating_review_id)}>\r\n//                       Delete\r\n//                     </button>\r\n//                   </div>\r\n//                 </div>\r\n\r\n\r\n\r\n//                 <p className=\"review-description\">{review.review_description}</p>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ViewProduct;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate, Link, useParams } from 'react-router-dom';\r\nimport RatingReviewService from '../service/RatingReviewService';\r\nimport ProductService from '../service/ProductService';\r\nimport '../../style/viewproduct.css';\r\n\r\nfunction ViewProduct() {\r\n  const { prodId } = useParams();\r\n  const navigate = useNavigate();\r\n  const userId = localStorage.getItem('userId');\r\n\r\n  const [prodData, setProdData] = useState({\r\n    product_name: '',\r\n    product_price: '',\r\n    product_description: '',\r\n    product_image: null,\r\n  });\r\n\r\n  const [userReview, setUserReview] = useState(null); // Logged-in user's review\r\n  const [otherReviews, setOtherReviews] = useState([]); // Other users' reviews\r\n\r\n  const [formData, setFormData] = useState({\r\n    rating_value: 0,\r\n    review_description: '',\r\n    product_id: prodId,\r\n    user_id: userId,\r\n  });\r\n\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editingReviewId, setEditingReviewId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchProductDataById(prodId);\r\n    fetchReviews(prodId, userId);\r\n  }, [prodId]);\r\n\r\n  const fetchProductDataById = async (prodId) => {\r\n    try {\r\n      const response = await ProductService.getProductById(prodId);\r\n      const { product_name, product_price, product_description, product_image } = response.singleProduct;\r\n      setProdData({ product_name, product_price, product_description, product_image });\r\n    } catch (error) {\r\n      console.error('Error fetching product data:', error);\r\n    }\r\n  };\r\n\r\n  const fetchReviews = async (prodId, userId) => {\r\n    try {\r\n      const requestData = { product_id: prodId, user_id: userId };\r\n      const reviewResponse = await RatingReviewService.getExistRatingReviewByUserId(requestData);\r\n\r\n      const reviewsList = reviewResponse.ratingReviewDtoList || [];\r\n\r\n      // Separate logged-in user's review and other reviews\r\n      const userReviewData = reviewsList.find((review) => review.user_id == userId);\r\n      const otherUserReviews = reviewsList.filter((review) => review.user_id != userId);\r\n\r\n      setUserReview(userReviewData || null);\r\n      setOtherReviews(otherUserReviews);\r\n\r\n      con\r\n\r\n\r\n    } catch (error) {\r\n      console.error('Error fetching reviews:', error);\r\n      setUserReview(null);\r\n      setOtherReviews([]);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleStarClick = (index) => {\r\n    setFormData({ ...formData, rating_value: index + 1 });\r\n  };\r\n\r\n  const handleSubmitReview = async (e) => {\r\n    e.preventDefault();\r\n    if (!isEditing && userReview) {\r\n      alert('You have already submitted a review for this product.');\r\n      setFormData({ rating_value: 0, review_description: '' });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (isEditing) {\r\n        await RatingReviewService.updateReviewRatingDetails(editingReviewId, formData); // Update the existing review\r\n        alert('Review updated successfully');\r\n        setIsEditing(false);\r\n        setEditingReviewId(null);\r\n      } else {\r\n        await RatingReviewService.SaveRatingReview(formData); // Submit a new review\r\n        alert('Review submitted successfully');\r\n      }\r\n\r\n      // Reset form and refresh reviews\r\n      setFormData({ rating_value: 0, review_description: '' });\r\n      fetchReviews(prodId, userId);\r\n    } catch (error) {\r\n      console.error('Error submitting review:', error);\r\n      alert('An error occurred while submitting the review');\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (review) => {\r\n    setIsEditing(true);\r\n    setEditingReviewId(review.rating_review_id);\r\n    setFormData({\r\n      rating_value: review.rating_value,\r\n      review_description: review.review_description,\r\n      product_id: review.product_id,\r\n      user_id: review.user_id,\r\n    });\r\n  };\r\n\r\n  const handleDeleteClick = async (reviewId) => {\r\n    const confirmDelete = window.confirm('Are you sure you want to delete this review?');\r\n    if (confirmDelete) {\r\n      try {\r\n        await RatingReviewService.deleteReviewRatingById(reviewId); // Call delete service\r\n        alert('Review deleted successfully');\r\n        fetchReviews(prodId, userId); // Refresh reviews\r\n      } catch (error) {\r\n        console.error('Error deleting review:', error);\r\n        alert('An error occurred while deleting the review');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"view-product-container\">\r\n      <div className=\"product-content\">\r\n        <div className=\"left-container\">\r\n          <img\r\n            src={`data:image/jpeg;base64,${prodData.product_image}`}\r\n            alt={prodData.product_name}\r\n            className=\"product-image-view\"\r\n          />\r\n        </div>\r\n        <div className=\"right-container\">\r\n          <h2 className=\"product-name\">{prodData.product_name}</h2>\r\n          <p className=\"product-price\">${prodData.product_price}</p>\r\n          <p className=\"product-description\">{prodData.product_description}</p>\r\n\r\n          <div className=\"add-review\">\r\n            <h3>{isEditing ? 'Edit Your Review' : 'Write Your Review'}</h3>\r\n            <div className=\"star-rating\">\r\n              {[...Array(5)].map((_, index) => (\r\n                <span\r\n                  key={index}\r\n                  className={index < formData.rating_value ? 'filled' : 'empty'}\r\n                  onClick={() => handleStarClick(index)}\r\n                >\r\n                  ★\r\n                </span>\r\n              ))}\r\n            </div>\r\n            <textarea\r\n              className=\"review-textbox\"\r\n              name=\"review_description\"\r\n              placeholder=\"Write your review here...\"\r\n              value={formData.review_description}\r\n              onChange={handleInputChange}\r\n              required\r\n            ></textarea>\r\n            <button onClick={handleSubmitReview} className=\"submit-review-button\">\r\n              {isEditing ? 'Update Review' : 'Submit Review'}\r\n            </button>\r\n            <br />\r\n            <Link to=\"/product-list\" className=\"back-link\">\r\n              Back to Product List\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {userReview && (\r\n        <div className=\"user-review\">\r\n          <h3>Your Review</h3>\r\n          <div className=\"review-card\">\r\n            <p style={{ textTransform: \"uppercase\" }}>{userReview.user_name}</p>\r\n            <div className=\"review-header\">\r\n              <div className=\"review-rating\">\r\n                {[...Array(userReview.rating_value)].map((_, index) => (\r\n                  <span key={index} className=\"filled\">★</span>\r\n                ))}\r\n              </div>\r\n              <div className=\"buttons\">\r\n                <button className=\"edit-button\" onClick={() => handleEditClick(userReview)}>\r\n                  Edit\r\n                </button>\r\n                <button className=\"delete-button\" onClick={() => handleDeleteClick(userReview.rating_review_id)}>\r\n                  Delete\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <p className=\"review-description\">{userReview.review_description}</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {otherReviews.length > 0 && (\r\n        <div className=\"other-reviews\">\r\n          <h3>Other Customer Reviews</h3>\r\n          <div className=\"reviews-container\">\r\n            {otherReviews.map((review) => (\r\n              <div key={review.rating_review_id} className=\"review-card\">\r\n                <p style={{ textTransform: \"uppercase\" }}>{review.user_name}</p>\r\n                <div className=\"review-header\">\r\n                  <div className=\"review-rating\">\r\n                    {[...Array(review.rating_value)].map((_, index) => (\r\n                      <span key={index} className=\"filled\">★</span>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n                <p className=\"review-description\">{review.review_description}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewProduct;\r\n\r\n\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}